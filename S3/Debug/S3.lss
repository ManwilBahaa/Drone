
S3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b9c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  00000c10  2**0
                  ALLOC
  2 .stab         00000ff0  00000000  00000000  00000c10  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000005bd  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 94 05 	call	0xb28	; 0xb28 <main>
  74:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_u8_SET_PIN>:
#include "STD_TYPES.h"
#include "DIO.h"
#include "DIO_REGISTER.h"

u8 DIO_u8_SET_PIN(u8 Port , u8 Pin , u8 Direction)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <DIO_u8_SET_PIN+0x6>
  82:	00 d0       	rcall	.+0      	; 0x84 <DIO_u8_SET_PIN+0x8>
  84:	00 d0       	rcall	.+0      	; 0x86 <DIO_u8_SET_PIN+0xa>
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	8a 83       	std	Y+2, r24	; 0x02
  8c:	6b 83       	std	Y+3, r22	; 0x03
  8e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_error_state ;

	if ((Port >= PORTA && Port <= PORTD) && (Pin >= PIN0 && Pin <= PIN7) && (Direction == INPUT || Direction == OUTPUT))
  90:	8a 81       	ldd	r24, Y+2	; 0x02
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	08 f0       	brcs	.+2      	; 0x98 <DIO_u8_SET_PIN+0x1c>
  96:	ee c0       	rjmp	.+476    	; 0x274 <DIO_u8_SET_PIN+0x1f8>
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	88 30       	cpi	r24, 0x08	; 8
  9c:	08 f0       	brcs	.+2      	; 0xa0 <DIO_u8_SET_PIN+0x24>
  9e:	ea c0       	rjmp	.+468    	; 0x274 <DIO_u8_SET_PIN+0x1f8>
  a0:	8c 81       	ldd	r24, Y+4	; 0x04
  a2:	88 23       	and	r24, r24
  a4:	21 f0       	breq	.+8      	; 0xae <DIO_u8_SET_PIN+0x32>
  a6:	8c 81       	ldd	r24, Y+4	; 0x04
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	09 f0       	breq	.+2      	; 0xae <DIO_u8_SET_PIN+0x32>
  ac:	e3 c0       	rjmp	.+454    	; 0x274 <DIO_u8_SET_PIN+0x1f8>
	{
		Local_u8_error_state = OK;
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	89 83       	std	Y+1, r24	; 0x01
		switch(Port){
  b2:	8a 81       	ldd	r24, Y+2	; 0x02
  b4:	28 2f       	mov	r18, r24
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	3e 83       	std	Y+6, r19	; 0x06
  ba:	2d 83       	std	Y+5, r18	; 0x05
  bc:	8d 81       	ldd	r24, Y+5	; 0x05
  be:	9e 81       	ldd	r25, Y+6	; 0x06
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	91 05       	cpc	r25, r1
  c4:	09 f4       	brne	.+2      	; 0xc8 <DIO_u8_SET_PIN+0x4c>
  c6:	47 c0       	rjmp	.+142    	; 0x156 <DIO_u8_SET_PIN+0xda>
  c8:	2d 81       	ldd	r18, Y+5	; 0x05
  ca:	3e 81       	ldd	r19, Y+6	; 0x06
  cc:	22 30       	cpi	r18, 0x02	; 2
  ce:	31 05       	cpc	r19, r1
  d0:	2c f4       	brge	.+10     	; 0xdc <DIO_u8_SET_PIN+0x60>
  d2:	8d 81       	ldd	r24, Y+5	; 0x05
  d4:	9e 81       	ldd	r25, Y+6	; 0x06
  d6:	00 97       	sbiw	r24, 0x00	; 0
  d8:	71 f0       	breq	.+28     	; 0xf6 <DIO_u8_SET_PIN+0x7a>
  da:	cd c0       	rjmp	.+410    	; 0x276 <DIO_u8_SET_PIN+0x1fa>
  dc:	2d 81       	ldd	r18, Y+5	; 0x05
  de:	3e 81       	ldd	r19, Y+6	; 0x06
  e0:	22 30       	cpi	r18, 0x02	; 2
  e2:	31 05       	cpc	r19, r1
  e4:	09 f4       	brne	.+2      	; 0xe8 <DIO_u8_SET_PIN+0x6c>
  e6:	67 c0       	rjmp	.+206    	; 0x1b6 <DIO_u8_SET_PIN+0x13a>
  e8:	8d 81       	ldd	r24, Y+5	; 0x05
  ea:	9e 81       	ldd	r25, Y+6	; 0x06
  ec:	83 30       	cpi	r24, 0x03	; 3
  ee:	91 05       	cpc	r25, r1
  f0:	09 f4       	brne	.+2      	; 0xf4 <DIO_u8_SET_PIN+0x78>
  f2:	91 c0       	rjmp	.+290    	; 0x216 <DIO_u8_SET_PIN+0x19a>
  f4:	c0 c0       	rjmp	.+384    	; 0x276 <DIO_u8_SET_PIN+0x1fa>
		case PORTA:
			if(Direction == INPUT)
  f6:	8c 81       	ldd	r24, Y+4	; 0x04
  f8:	88 23       	and	r24, r24
  fa:	a9 f4       	brne	.+42     	; 0x126 <DIO_u8_SET_PIN+0xaa>
				CLEAR_BIT(DDRA_REGISTER, Pin);
  fc:	aa e3       	ldi	r26, 0x3A	; 58
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	ea e3       	ldi	r30, 0x3A	; 58
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	48 2f       	mov	r20, r24
 108:	8b 81       	ldd	r24, Y+3	; 0x03
 10a:	28 2f       	mov	r18, r24
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 2e       	mov	r0, r18
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_u8_SET_PIN+0x9e>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_u8_SET_PIN+0x9a>
 11e:	80 95       	com	r24
 120:	84 23       	and	r24, r20
 122:	8c 93       	st	X, r24
 124:	a8 c0       	rjmp	.+336    	; 0x276 <DIO_u8_SET_PIN+0x1fa>
			else if(Direction == OUTPUT)
 126:	8c 81       	ldd	r24, Y+4	; 0x04
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	09 f0       	breq	.+2      	; 0x12e <DIO_u8_SET_PIN+0xb2>
 12c:	a4 c0       	rjmp	.+328    	; 0x276 <DIO_u8_SET_PIN+0x1fa>
				SET_BIT(DDRA_REGISTER, Pin);
 12e:	aa e3       	ldi	r26, 0x3A	; 58
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	ea e3       	ldi	r30, 0x3A	; 58
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	48 2f       	mov	r20, r24
 13a:	8b 81       	ldd	r24, Y+3	; 0x03
 13c:	28 2f       	mov	r18, r24
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 2e       	mov	r0, r18
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_u8_SET_PIN+0xd0>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_u8_SET_PIN+0xcc>
 150:	84 2b       	or	r24, r20
 152:	8c 93       	st	X, r24
 154:	90 c0       	rjmp	.+288    	; 0x276 <DIO_u8_SET_PIN+0x1fa>
			break;

		case PORTB:
			if(Direction == INPUT)
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	88 23       	and	r24, r24
 15a:	a9 f4       	brne	.+42     	; 0x186 <DIO_u8_SET_PIN+0x10a>
				CLEAR_BIT(DDRB_REGISTER, Pin);
 15c:	a7 e3       	ldi	r26, 0x37	; 55
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	e7 e3       	ldi	r30, 0x37	; 55
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	48 2f       	mov	r20, r24
 168:	8b 81       	ldd	r24, Y+3	; 0x03
 16a:	28 2f       	mov	r18, r24
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 2e       	mov	r0, r18
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_u8_SET_PIN+0xfe>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	0a 94       	dec	r0
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_u8_SET_PIN+0xfa>
 17e:	80 95       	com	r24
 180:	84 23       	and	r24, r20
 182:	8c 93       	st	X, r24
 184:	78 c0       	rjmp	.+240    	; 0x276 <DIO_u8_SET_PIN+0x1fa>
			else if(Direction == OUTPUT)
 186:	8c 81       	ldd	r24, Y+4	; 0x04
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	09 f0       	breq	.+2      	; 0x18e <DIO_u8_SET_PIN+0x112>
 18c:	74 c0       	rjmp	.+232    	; 0x276 <DIO_u8_SET_PIN+0x1fa>
				SET_BIT(DDRB_REGISTER, Pin);
 18e:	a7 e3       	ldi	r26, 0x37	; 55
 190:	b0 e0       	ldi	r27, 0x00	; 0
 192:	e7 e3       	ldi	r30, 0x37	; 55
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	48 2f       	mov	r20, r24
 19a:	8b 81       	ldd	r24, Y+3	; 0x03
 19c:	28 2f       	mov	r18, r24
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 2e       	mov	r0, r18
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_u8_SET_PIN+0x130>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	0a 94       	dec	r0
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_u8_SET_PIN+0x12c>
 1b0:	84 2b       	or	r24, r20
 1b2:	8c 93       	st	X, r24
 1b4:	60 c0       	rjmp	.+192    	; 0x276 <DIO_u8_SET_PIN+0x1fa>
			break;

		case PORTC:
			if(Direction == INPUT)
 1b6:	8c 81       	ldd	r24, Y+4	; 0x04
 1b8:	88 23       	and	r24, r24
 1ba:	a9 f4       	brne	.+42     	; 0x1e6 <DIO_u8_SET_PIN+0x16a>
				CLEAR_BIT(DDRC_REGISTER, Pin);
 1bc:	a4 e3       	ldi	r26, 0x34	; 52
 1be:	b0 e0       	ldi	r27, 0x00	; 0
 1c0:	e4 e3       	ldi	r30, 0x34	; 52
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	48 2f       	mov	r20, r24
 1c8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ca:	28 2f       	mov	r18, r24
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 2e       	mov	r0, r18
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_u8_SET_PIN+0x15e>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	0a 94       	dec	r0
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_u8_SET_PIN+0x15a>
 1de:	80 95       	com	r24
 1e0:	84 23       	and	r24, r20
 1e2:	8c 93       	st	X, r24
 1e4:	48 c0       	rjmp	.+144    	; 0x276 <DIO_u8_SET_PIN+0x1fa>
			else if(Direction == OUTPUT)
 1e6:	8c 81       	ldd	r24, Y+4	; 0x04
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	09 f0       	breq	.+2      	; 0x1ee <DIO_u8_SET_PIN+0x172>
 1ec:	44 c0       	rjmp	.+136    	; 0x276 <DIO_u8_SET_PIN+0x1fa>
				SET_BIT(DDRC_REGISTER, Pin);
 1ee:	a4 e3       	ldi	r26, 0x34	; 52
 1f0:	b0 e0       	ldi	r27, 0x00	; 0
 1f2:	e4 e3       	ldi	r30, 0x34	; 52
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	48 2f       	mov	r20, r24
 1fa:	8b 81       	ldd	r24, Y+3	; 0x03
 1fc:	28 2f       	mov	r18, r24
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 2e       	mov	r0, r18
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_u8_SET_PIN+0x190>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	0a 94       	dec	r0
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_u8_SET_PIN+0x18c>
 210:	84 2b       	or	r24, r20
 212:	8c 93       	st	X, r24
 214:	30 c0       	rjmp	.+96     	; 0x276 <DIO_u8_SET_PIN+0x1fa>
			break;

		case PORTD:
			if(Direction == INPUT)
 216:	8c 81       	ldd	r24, Y+4	; 0x04
 218:	88 23       	and	r24, r24
 21a:	a9 f4       	brne	.+42     	; 0x246 <DIO_u8_SET_PIN+0x1ca>
				CLEAR_BIT(DDRD_REGISTER, Pin);
 21c:	a1 e3       	ldi	r26, 0x31	; 49
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	e1 e3       	ldi	r30, 0x31	; 49
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	48 2f       	mov	r20, r24
 228:	8b 81       	ldd	r24, Y+3	; 0x03
 22a:	28 2f       	mov	r18, r24
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 2e       	mov	r0, r18
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_u8_SET_PIN+0x1be>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	0a 94       	dec	r0
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_u8_SET_PIN+0x1ba>
 23e:	80 95       	com	r24
 240:	84 23       	and	r24, r20
 242:	8c 93       	st	X, r24
 244:	18 c0       	rjmp	.+48     	; 0x276 <DIO_u8_SET_PIN+0x1fa>
			else if(Direction == OUTPUT)
 246:	8c 81       	ldd	r24, Y+4	; 0x04
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	a9 f4       	brne	.+42     	; 0x276 <DIO_u8_SET_PIN+0x1fa>
				SET_BIT(DDRD_REGISTER, Pin);
 24c:	a1 e3       	ldi	r26, 0x31	; 49
 24e:	b0 e0       	ldi	r27, 0x00	; 0
 250:	e1 e3       	ldi	r30, 0x31	; 49
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	48 2f       	mov	r20, r24
 258:	8b 81       	ldd	r24, Y+3	; 0x03
 25a:	28 2f       	mov	r18, r24
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 2e       	mov	r0, r18
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_u8_SET_PIN+0x1ee>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	0a 94       	dec	r0
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_u8_SET_PIN+0x1ea>
 26e:	84 2b       	or	r24, r20
 270:	8c 93       	st	X, r24
 272:	01 c0       	rjmp	.+2      	; 0x276 <DIO_u8_SET_PIN+0x1fa>
			break;
		}
	}
	else{
		Local_u8_error_state = ERR;
 274:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8_error_state;
 276:	89 81       	ldd	r24, Y+1	; 0x01
}
 278:	26 96       	adiw	r28, 0x06	; 6
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	f8 94       	cli
 27e:	de bf       	out	0x3e, r29	; 62
 280:	0f be       	out	0x3f, r0	; 63
 282:	cd bf       	out	0x3d, r28	; 61
 284:	cf 91       	pop	r28
 286:	df 91       	pop	r29
 288:	08 95       	ret

0000028a <DIO_u8_SET_PORT>:
u8 DIO_u8_SET_PORT(u8 Port , u8 Direction)
{
 28a:	df 93       	push	r29
 28c:	cf 93       	push	r28
 28e:	00 d0       	rcall	.+0      	; 0x290 <DIO_u8_SET_PORT+0x6>
 290:	00 d0       	rcall	.+0      	; 0x292 <DIO_u8_SET_PORT+0x8>
 292:	0f 92       	push	r0
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
 298:	8a 83       	std	Y+2, r24	; 0x02
 29a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_error_state = OK;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	89 83       	std	Y+1, r24	; 0x01
	if(Port > PORTD || Port < PORTA){
 2a0:	8a 81       	ldd	r24, Y+2	; 0x02
 2a2:	84 30       	cpi	r24, 0x04	; 4
 2a4:	10 f0       	brcs	.+4      	; 0x2aa <DIO_u8_SET_PORT+0x20>
		Local_u8_error_state = ERR;
 2a6:	19 82       	std	Y+1, r1	; 0x01
 2a8:	32 c0       	rjmp	.+100    	; 0x30e <DIO_u8_SET_PORT+0x84>
	}else{
		switch(Port)
 2aa:	8a 81       	ldd	r24, Y+2	; 0x02
 2ac:	28 2f       	mov	r18, r24
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	3d 83       	std	Y+5, r19	; 0x05
 2b2:	2c 83       	std	Y+4, r18	; 0x04
 2b4:	8c 81       	ldd	r24, Y+4	; 0x04
 2b6:	9d 81       	ldd	r25, Y+5	; 0x05
 2b8:	81 30       	cpi	r24, 0x01	; 1
 2ba:	91 05       	cpc	r25, r1
 2bc:	d1 f0       	breq	.+52     	; 0x2f2 <DIO_u8_SET_PORT+0x68>
 2be:	2c 81       	ldd	r18, Y+4	; 0x04
 2c0:	3d 81       	ldd	r19, Y+5	; 0x05
 2c2:	22 30       	cpi	r18, 0x02	; 2
 2c4:	31 05       	cpc	r19, r1
 2c6:	2c f4       	brge	.+10     	; 0x2d2 <DIO_u8_SET_PORT+0x48>
 2c8:	8c 81       	ldd	r24, Y+4	; 0x04
 2ca:	9d 81       	ldd	r25, Y+5	; 0x05
 2cc:	00 97       	sbiw	r24, 0x00	; 0
 2ce:	61 f0       	breq	.+24     	; 0x2e8 <DIO_u8_SET_PORT+0x5e>
 2d0:	1e c0       	rjmp	.+60     	; 0x30e <DIO_u8_SET_PORT+0x84>
 2d2:	2c 81       	ldd	r18, Y+4	; 0x04
 2d4:	3d 81       	ldd	r19, Y+5	; 0x05
 2d6:	22 30       	cpi	r18, 0x02	; 2
 2d8:	31 05       	cpc	r19, r1
 2da:	81 f0       	breq	.+32     	; 0x2fc <DIO_u8_SET_PORT+0x72>
 2dc:	8c 81       	ldd	r24, Y+4	; 0x04
 2de:	9d 81       	ldd	r25, Y+5	; 0x05
 2e0:	83 30       	cpi	r24, 0x03	; 3
 2e2:	91 05       	cpc	r25, r1
 2e4:	81 f0       	breq	.+32     	; 0x306 <DIO_u8_SET_PORT+0x7c>
 2e6:	13 c0       	rjmp	.+38     	; 0x30e <DIO_u8_SET_PORT+0x84>
		{
		case PORTA:
			DDRA_REGISTER= Direction;
 2e8:	ea e3       	ldi	r30, 0x3A	; 58
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	8b 81       	ldd	r24, Y+3	; 0x03
 2ee:	80 83       	st	Z, r24
 2f0:	0e c0       	rjmp	.+28     	; 0x30e <DIO_u8_SET_PORT+0x84>
			break;
		case PORTB:
			DDRB_REGISTER= Direction;
 2f2:	e7 e3       	ldi	r30, 0x37	; 55
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	8b 81       	ldd	r24, Y+3	; 0x03
 2f8:	80 83       	st	Z, r24
 2fa:	09 c0       	rjmp	.+18     	; 0x30e <DIO_u8_SET_PORT+0x84>
			break;
		case PORTC:
			DDRC_REGISTER= Direction;
 2fc:	e4 e3       	ldi	r30, 0x34	; 52
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	8b 81       	ldd	r24, Y+3	; 0x03
 302:	80 83       	st	Z, r24
 304:	04 c0       	rjmp	.+8      	; 0x30e <DIO_u8_SET_PORT+0x84>
			break;
		case PORTD:
			DDRD_REGISTER= Direction;
 306:	e1 e3       	ldi	r30, 0x31	; 49
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	8b 81       	ldd	r24, Y+3	; 0x03
 30c:	80 83       	st	Z, r24
			break;
		}
	}
	return Local_u8_error_state;
 30e:	89 81       	ldd	r24, Y+1	; 0x01

}
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	0f 90       	pop	r0
 316:	0f 90       	pop	r0
 318:	0f 90       	pop	r0
 31a:	cf 91       	pop	r28
 31c:	df 91       	pop	r29
 31e:	08 95       	ret

00000320 <DIO_u8_WRITE_PIN>:

u8 DIO_u8_WRITE_PIN(u8 Port , u8 Pin , u8 Value)
{
 320:	df 93       	push	r29
 322:	cf 93       	push	r28
 324:	00 d0       	rcall	.+0      	; 0x326 <DIO_u8_WRITE_PIN+0x6>
 326:	00 d0       	rcall	.+0      	; 0x328 <DIO_u8_WRITE_PIN+0x8>
 328:	00 d0       	rcall	.+0      	; 0x32a <DIO_u8_WRITE_PIN+0xa>
 32a:	cd b7       	in	r28, 0x3d	; 61
 32c:	de b7       	in	r29, 0x3e	; 62
 32e:	8a 83       	std	Y+2, r24	; 0x02
 330:	6b 83       	std	Y+3, r22	; 0x03
 332:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_error_state = OK;
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	89 83       	std	Y+1, r24	; 0x01
	if(Port > PORTD || Port < PORTA || Pin > PIN7 || Pin < PIN0 || (Value != HIGH && Value != LOW)){
 338:	8a 81       	ldd	r24, Y+2	; 0x02
 33a:	84 30       	cpi	r24, 0x04	; 4
 33c:	48 f4       	brcc	.+18     	; 0x350 <DIO_u8_WRITE_PIN+0x30>
 33e:	8b 81       	ldd	r24, Y+3	; 0x03
 340:	88 30       	cpi	r24, 0x08	; 8
 342:	30 f4       	brcc	.+12     	; 0x350 <DIO_u8_WRITE_PIN+0x30>
 344:	8c 81       	ldd	r24, Y+4	; 0x04
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	29 f0       	breq	.+10     	; 0x354 <DIO_u8_WRITE_PIN+0x34>
 34a:	8c 81       	ldd	r24, Y+4	; 0x04
 34c:	88 23       	and	r24, r24
 34e:	11 f0       	breq	.+4      	; 0x354 <DIO_u8_WRITE_PIN+0x34>
		Local_u8_error_state = ERR;
 350:	19 82       	std	Y+1, r1	; 0x01
 352:	e0 c0       	rjmp	.+448    	; 0x514 <DIO_u8_WRITE_PIN+0x1f4>
	}
	else{

		switch(Port){
 354:	8a 81       	ldd	r24, Y+2	; 0x02
 356:	28 2f       	mov	r18, r24
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	3e 83       	std	Y+6, r19	; 0x06
 35c:	2d 83       	std	Y+5, r18	; 0x05
 35e:	8d 81       	ldd	r24, Y+5	; 0x05
 360:	9e 81       	ldd	r25, Y+6	; 0x06
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	91 05       	cpc	r25, r1
 366:	09 f4       	brne	.+2      	; 0x36a <DIO_u8_WRITE_PIN+0x4a>
 368:	47 c0       	rjmp	.+142    	; 0x3f8 <DIO_u8_WRITE_PIN+0xd8>
 36a:	2d 81       	ldd	r18, Y+5	; 0x05
 36c:	3e 81       	ldd	r19, Y+6	; 0x06
 36e:	22 30       	cpi	r18, 0x02	; 2
 370:	31 05       	cpc	r19, r1
 372:	2c f4       	brge	.+10     	; 0x37e <DIO_u8_WRITE_PIN+0x5e>
 374:	8d 81       	ldd	r24, Y+5	; 0x05
 376:	9e 81       	ldd	r25, Y+6	; 0x06
 378:	00 97       	sbiw	r24, 0x00	; 0
 37a:	71 f0       	breq	.+28     	; 0x398 <DIO_u8_WRITE_PIN+0x78>
 37c:	cb c0       	rjmp	.+406    	; 0x514 <DIO_u8_WRITE_PIN+0x1f4>
 37e:	2d 81       	ldd	r18, Y+5	; 0x05
 380:	3e 81       	ldd	r19, Y+6	; 0x06
 382:	22 30       	cpi	r18, 0x02	; 2
 384:	31 05       	cpc	r19, r1
 386:	09 f4       	brne	.+2      	; 0x38a <DIO_u8_WRITE_PIN+0x6a>
 388:	67 c0       	rjmp	.+206    	; 0x458 <DIO_u8_WRITE_PIN+0x138>
 38a:	8d 81       	ldd	r24, Y+5	; 0x05
 38c:	9e 81       	ldd	r25, Y+6	; 0x06
 38e:	83 30       	cpi	r24, 0x03	; 3
 390:	91 05       	cpc	r25, r1
 392:	09 f4       	brne	.+2      	; 0x396 <DIO_u8_WRITE_PIN+0x76>
 394:	91 c0       	rjmp	.+290    	; 0x4b8 <DIO_u8_WRITE_PIN+0x198>
 396:	be c0       	rjmp	.+380    	; 0x514 <DIO_u8_WRITE_PIN+0x1f4>
		case PORTA:
			if(Value == LOW)
 398:	8c 81       	ldd	r24, Y+4	; 0x04
 39a:	88 23       	and	r24, r24
 39c:	a9 f4       	brne	.+42     	; 0x3c8 <DIO_u8_WRITE_PIN+0xa8>
				CLEAR_BIT(PORTA_REGISTER, Pin);
 39e:	ab e3       	ldi	r26, 0x3B	; 59
 3a0:	b0 e0       	ldi	r27, 0x00	; 0
 3a2:	eb e3       	ldi	r30, 0x3B	; 59
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	48 2f       	mov	r20, r24
 3aa:	8b 81       	ldd	r24, Y+3	; 0x03
 3ac:	28 2f       	mov	r18, r24
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	02 2e       	mov	r0, r18
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_u8_WRITE_PIN+0x9c>
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	0a 94       	dec	r0
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_u8_WRITE_PIN+0x98>
 3c0:	80 95       	com	r24
 3c2:	84 23       	and	r24, r20
 3c4:	8c 93       	st	X, r24
 3c6:	a6 c0       	rjmp	.+332    	; 0x514 <DIO_u8_WRITE_PIN+0x1f4>
			else if(Value == HIGH)
 3c8:	8c 81       	ldd	r24, Y+4	; 0x04
 3ca:	81 30       	cpi	r24, 0x01	; 1
 3cc:	09 f0       	breq	.+2      	; 0x3d0 <DIO_u8_WRITE_PIN+0xb0>
 3ce:	a2 c0       	rjmp	.+324    	; 0x514 <DIO_u8_WRITE_PIN+0x1f4>
				SET_BIT(PORTA_REGISTER, Pin);
 3d0:	ab e3       	ldi	r26, 0x3B	; 59
 3d2:	b0 e0       	ldi	r27, 0x00	; 0
 3d4:	eb e3       	ldi	r30, 0x3B	; 59
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	80 81       	ld	r24, Z
 3da:	48 2f       	mov	r20, r24
 3dc:	8b 81       	ldd	r24, Y+3	; 0x03
 3de:	28 2f       	mov	r18, r24
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	02 2e       	mov	r0, r18
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_u8_WRITE_PIN+0xce>
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	0a 94       	dec	r0
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_u8_WRITE_PIN+0xca>
 3f2:	84 2b       	or	r24, r20
 3f4:	8c 93       	st	X, r24
 3f6:	8e c0       	rjmp	.+284    	; 0x514 <DIO_u8_WRITE_PIN+0x1f4>
			break;

		case PORTB:
			if(Value == LOW)
 3f8:	8c 81       	ldd	r24, Y+4	; 0x04
 3fa:	88 23       	and	r24, r24
 3fc:	a9 f4       	brne	.+42     	; 0x428 <DIO_u8_WRITE_PIN+0x108>
				CLEAR_BIT(PORTB_REGISTER, Pin);
 3fe:	a8 e3       	ldi	r26, 0x38	; 56
 400:	b0 e0       	ldi	r27, 0x00	; 0
 402:	e8 e3       	ldi	r30, 0x38	; 56
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	48 2f       	mov	r20, r24
 40a:	8b 81       	ldd	r24, Y+3	; 0x03
 40c:	28 2f       	mov	r18, r24
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	02 2e       	mov	r0, r18
 416:	02 c0       	rjmp	.+4      	; 0x41c <DIO_u8_WRITE_PIN+0xfc>
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	0a 94       	dec	r0
 41e:	e2 f7       	brpl	.-8      	; 0x418 <DIO_u8_WRITE_PIN+0xf8>
 420:	80 95       	com	r24
 422:	84 23       	and	r24, r20
 424:	8c 93       	st	X, r24
 426:	76 c0       	rjmp	.+236    	; 0x514 <DIO_u8_WRITE_PIN+0x1f4>
			else if(Value == HIGH)
 428:	8c 81       	ldd	r24, Y+4	; 0x04
 42a:	81 30       	cpi	r24, 0x01	; 1
 42c:	09 f0       	breq	.+2      	; 0x430 <DIO_u8_WRITE_PIN+0x110>
 42e:	72 c0       	rjmp	.+228    	; 0x514 <DIO_u8_WRITE_PIN+0x1f4>
				SET_BIT(PORTB_REGISTER, Pin);
 430:	a8 e3       	ldi	r26, 0x38	; 56
 432:	b0 e0       	ldi	r27, 0x00	; 0
 434:	e8 e3       	ldi	r30, 0x38	; 56
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	48 2f       	mov	r20, r24
 43c:	8b 81       	ldd	r24, Y+3	; 0x03
 43e:	28 2f       	mov	r18, r24
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	02 2e       	mov	r0, r18
 448:	02 c0       	rjmp	.+4      	; 0x44e <DIO_u8_WRITE_PIN+0x12e>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	0a 94       	dec	r0
 450:	e2 f7       	brpl	.-8      	; 0x44a <DIO_u8_WRITE_PIN+0x12a>
 452:	84 2b       	or	r24, r20
 454:	8c 93       	st	X, r24
 456:	5e c0       	rjmp	.+188    	; 0x514 <DIO_u8_WRITE_PIN+0x1f4>
			break;

		case PORTC:
			if(Value == LOW)
 458:	8c 81       	ldd	r24, Y+4	; 0x04
 45a:	88 23       	and	r24, r24
 45c:	a9 f4       	brne	.+42     	; 0x488 <DIO_u8_WRITE_PIN+0x168>
				CLEAR_BIT(PORTC_REGISTER, Pin);
 45e:	a5 e3       	ldi	r26, 0x35	; 53
 460:	b0 e0       	ldi	r27, 0x00	; 0
 462:	e5 e3       	ldi	r30, 0x35	; 53
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	48 2f       	mov	r20, r24
 46a:	8b 81       	ldd	r24, Y+3	; 0x03
 46c:	28 2f       	mov	r18, r24
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	02 2e       	mov	r0, r18
 476:	02 c0       	rjmp	.+4      	; 0x47c <DIO_u8_WRITE_PIN+0x15c>
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	0a 94       	dec	r0
 47e:	e2 f7       	brpl	.-8      	; 0x478 <DIO_u8_WRITE_PIN+0x158>
 480:	80 95       	com	r24
 482:	84 23       	and	r24, r20
 484:	8c 93       	st	X, r24
 486:	46 c0       	rjmp	.+140    	; 0x514 <DIO_u8_WRITE_PIN+0x1f4>
			else if(Value == HIGH)
 488:	8c 81       	ldd	r24, Y+4	; 0x04
 48a:	81 30       	cpi	r24, 0x01	; 1
 48c:	09 f0       	breq	.+2      	; 0x490 <DIO_u8_WRITE_PIN+0x170>
 48e:	42 c0       	rjmp	.+132    	; 0x514 <DIO_u8_WRITE_PIN+0x1f4>
				SET_BIT(PORTC_REGISTER, Pin);
 490:	a5 e3       	ldi	r26, 0x35	; 53
 492:	b0 e0       	ldi	r27, 0x00	; 0
 494:	e5 e3       	ldi	r30, 0x35	; 53
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	80 81       	ld	r24, Z
 49a:	48 2f       	mov	r20, r24
 49c:	8b 81       	ldd	r24, Y+3	; 0x03
 49e:	28 2f       	mov	r18, r24
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	02 2e       	mov	r0, r18
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <DIO_u8_WRITE_PIN+0x18e>
 4aa:	88 0f       	add	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	0a 94       	dec	r0
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <DIO_u8_WRITE_PIN+0x18a>
 4b2:	84 2b       	or	r24, r20
 4b4:	8c 93       	st	X, r24
 4b6:	2e c0       	rjmp	.+92     	; 0x514 <DIO_u8_WRITE_PIN+0x1f4>
			break;

		case PORTD:
			if(Value == LOW)
 4b8:	8c 81       	ldd	r24, Y+4	; 0x04
 4ba:	88 23       	and	r24, r24
 4bc:	a9 f4       	brne	.+42     	; 0x4e8 <DIO_u8_WRITE_PIN+0x1c8>
				CLEAR_BIT(PORTD_REGISTER, Pin);
 4be:	a2 e3       	ldi	r26, 0x32	; 50
 4c0:	b0 e0       	ldi	r27, 0x00	; 0
 4c2:	e2 e3       	ldi	r30, 0x32	; 50
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	48 2f       	mov	r20, r24
 4ca:	8b 81       	ldd	r24, Y+3	; 0x03
 4cc:	28 2f       	mov	r18, r24
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	02 2e       	mov	r0, r18
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_u8_WRITE_PIN+0x1bc>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	0a 94       	dec	r0
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_u8_WRITE_PIN+0x1b8>
 4e0:	80 95       	com	r24
 4e2:	84 23       	and	r24, r20
 4e4:	8c 93       	st	X, r24
 4e6:	16 c0       	rjmp	.+44     	; 0x514 <DIO_u8_WRITE_PIN+0x1f4>
			else if(Value == HIGH)
 4e8:	8c 81       	ldd	r24, Y+4	; 0x04
 4ea:	81 30       	cpi	r24, 0x01	; 1
 4ec:	99 f4       	brne	.+38     	; 0x514 <DIO_u8_WRITE_PIN+0x1f4>
				SET_BIT(PORTD_REGISTER, Pin);
 4ee:	a2 e3       	ldi	r26, 0x32	; 50
 4f0:	b0 e0       	ldi	r27, 0x00	; 0
 4f2:	e2 e3       	ldi	r30, 0x32	; 50
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	48 2f       	mov	r20, r24
 4fa:	8b 81       	ldd	r24, Y+3	; 0x03
 4fc:	28 2f       	mov	r18, r24
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	02 2e       	mov	r0, r18
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_u8_WRITE_PIN+0x1ec>
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	0a 94       	dec	r0
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_u8_WRITE_PIN+0x1e8>
 510:	84 2b       	or	r24, r20
 512:	8c 93       	st	X, r24
			break;
		}
	}

	return Local_u8_error_state;
 514:	89 81       	ldd	r24, Y+1	; 0x01

}
 516:	26 96       	adiw	r28, 0x06	; 6
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	f8 94       	cli
 51c:	de bf       	out	0x3e, r29	; 62
 51e:	0f be       	out	0x3f, r0	; 63
 520:	cd bf       	out	0x3d, r28	; 61
 522:	cf 91       	pop	r28
 524:	df 91       	pop	r29
 526:	08 95       	ret

00000528 <DIO_u8_WRITE_PORT>:
u8 DIO_u8_WRITE_PORT(u8 Port , u8 Value)
{
 528:	df 93       	push	r29
 52a:	cf 93       	push	r28
 52c:	00 d0       	rcall	.+0      	; 0x52e <DIO_u8_WRITE_PORT+0x6>
 52e:	00 d0       	rcall	.+0      	; 0x530 <DIO_u8_WRITE_PORT+0x8>
 530:	0f 92       	push	r0
 532:	cd b7       	in	r28, 0x3d	; 61
 534:	de b7       	in	r29, 0x3e	; 62
 536:	8a 83       	std	Y+2, r24	; 0x02
 538:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_error_state = OK;
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	89 83       	std	Y+1, r24	; 0x01
	if(Port > PORTD || Port < PORTA)
 53e:	8a 81       	ldd	r24, Y+2	; 0x02
 540:	84 30       	cpi	r24, 0x04	; 4
 542:	10 f0       	brcs	.+4      	; 0x548 <DIO_u8_WRITE_PORT+0x20>
	{
		Local_u8_error_state = ERR;
 544:	19 82       	std	Y+1, r1	; 0x01
 546:	32 c0       	rjmp	.+100    	; 0x5ac <DIO_u8_WRITE_PORT+0x84>
	}else{
		switch(Port){
 548:	8a 81       	ldd	r24, Y+2	; 0x02
 54a:	28 2f       	mov	r18, r24
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	3d 83       	std	Y+5, r19	; 0x05
 550:	2c 83       	std	Y+4, r18	; 0x04
 552:	8c 81       	ldd	r24, Y+4	; 0x04
 554:	9d 81       	ldd	r25, Y+5	; 0x05
 556:	81 30       	cpi	r24, 0x01	; 1
 558:	91 05       	cpc	r25, r1
 55a:	d1 f0       	breq	.+52     	; 0x590 <DIO_u8_WRITE_PORT+0x68>
 55c:	2c 81       	ldd	r18, Y+4	; 0x04
 55e:	3d 81       	ldd	r19, Y+5	; 0x05
 560:	22 30       	cpi	r18, 0x02	; 2
 562:	31 05       	cpc	r19, r1
 564:	2c f4       	brge	.+10     	; 0x570 <DIO_u8_WRITE_PORT+0x48>
 566:	8c 81       	ldd	r24, Y+4	; 0x04
 568:	9d 81       	ldd	r25, Y+5	; 0x05
 56a:	00 97       	sbiw	r24, 0x00	; 0
 56c:	61 f0       	breq	.+24     	; 0x586 <DIO_u8_WRITE_PORT+0x5e>
 56e:	1e c0       	rjmp	.+60     	; 0x5ac <DIO_u8_WRITE_PORT+0x84>
 570:	2c 81       	ldd	r18, Y+4	; 0x04
 572:	3d 81       	ldd	r19, Y+5	; 0x05
 574:	22 30       	cpi	r18, 0x02	; 2
 576:	31 05       	cpc	r19, r1
 578:	81 f0       	breq	.+32     	; 0x59a <DIO_u8_WRITE_PORT+0x72>
 57a:	8c 81       	ldd	r24, Y+4	; 0x04
 57c:	9d 81       	ldd	r25, Y+5	; 0x05
 57e:	83 30       	cpi	r24, 0x03	; 3
 580:	91 05       	cpc	r25, r1
 582:	81 f0       	breq	.+32     	; 0x5a4 <DIO_u8_WRITE_PORT+0x7c>
 584:	13 c0       	rjmp	.+38     	; 0x5ac <DIO_u8_WRITE_PORT+0x84>
		case PORTA:
			PORTA_REGISTER=Value;
 586:	eb e3       	ldi	r30, 0x3B	; 59
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	8b 81       	ldd	r24, Y+3	; 0x03
 58c:	80 83       	st	Z, r24
 58e:	0e c0       	rjmp	.+28     	; 0x5ac <DIO_u8_WRITE_PORT+0x84>
			break;
		case PORTB:
			PORTB_REGISTER=Value;
 590:	e8 e3       	ldi	r30, 0x38	; 56
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	8b 81       	ldd	r24, Y+3	; 0x03
 596:	80 83       	st	Z, r24
 598:	09 c0       	rjmp	.+18     	; 0x5ac <DIO_u8_WRITE_PORT+0x84>
			break;
		case PORTC:
			PORTC_REGISTER=Value;
 59a:	e5 e3       	ldi	r30, 0x35	; 53
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	8b 81       	ldd	r24, Y+3	; 0x03
 5a0:	80 83       	st	Z, r24
 5a2:	04 c0       	rjmp	.+8      	; 0x5ac <DIO_u8_WRITE_PORT+0x84>
			break;
		case PORTD:
			PORTD_REGISTER=Value;
 5a4:	e2 e3       	ldi	r30, 0x32	; 50
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	8b 81       	ldd	r24, Y+3	; 0x03
 5aa:	80 83       	st	Z, r24
			break;
		}
	}
	return Local_u8_error_state;
 5ac:	89 81       	ldd	r24, Y+1	; 0x01
}
 5ae:	0f 90       	pop	r0
 5b0:	0f 90       	pop	r0
 5b2:	0f 90       	pop	r0
 5b4:	0f 90       	pop	r0
 5b6:	0f 90       	pop	r0
 5b8:	cf 91       	pop	r28
 5ba:	df 91       	pop	r29
 5bc:	08 95       	ret

000005be <DIO_u8_READ_PORT>:

u8 DIO_u8_READ_PORT(u8 Port )
{
 5be:	df 93       	push	r29
 5c0:	cf 93       	push	r28
 5c2:	00 d0       	rcall	.+0      	; 0x5c4 <DIO_u8_READ_PORT+0x6>
 5c4:	00 d0       	rcall	.+0      	; 0x5c6 <DIO_u8_READ_PORT+0x8>
 5c6:	00 d0       	rcall	.+0      	; 0x5c8 <DIO_u8_READ_PORT+0xa>
 5c8:	cd b7       	in	r28, 0x3d	; 61
 5ca:	de b7       	in	r29, 0x3e	; 62
 5cc:	8b 83       	std	Y+3, r24	; 0x03
	if (Port >= PORTA && Port <= PORTD){
 5ce:	8b 81       	ldd	r24, Y+3	; 0x03
 5d0:	84 30       	cpi	r24, 0x04	; 4
 5d2:	a8 f5       	brcc	.+106    	; 0x63e <DIO_u8_READ_PORT+0x80>
		u8 Value;
		switch(Port){
 5d4:	8b 81       	ldd	r24, Y+3	; 0x03
 5d6:	28 2f       	mov	r18, r24
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	3e 83       	std	Y+6, r19	; 0x06
 5dc:	2d 83       	std	Y+5, r18	; 0x05
 5de:	8d 81       	ldd	r24, Y+5	; 0x05
 5e0:	9e 81       	ldd	r25, Y+6	; 0x06
 5e2:	81 30       	cpi	r24, 0x01	; 1
 5e4:	91 05       	cpc	r25, r1
 5e6:	d1 f0       	breq	.+52     	; 0x61c <DIO_u8_READ_PORT+0x5e>
 5e8:	2d 81       	ldd	r18, Y+5	; 0x05
 5ea:	3e 81       	ldd	r19, Y+6	; 0x06
 5ec:	22 30       	cpi	r18, 0x02	; 2
 5ee:	31 05       	cpc	r19, r1
 5f0:	2c f4       	brge	.+10     	; 0x5fc <DIO_u8_READ_PORT+0x3e>
 5f2:	8d 81       	ldd	r24, Y+5	; 0x05
 5f4:	9e 81       	ldd	r25, Y+6	; 0x06
 5f6:	00 97       	sbiw	r24, 0x00	; 0
 5f8:	61 f0       	breq	.+24     	; 0x612 <DIO_u8_READ_PORT+0x54>
 5fa:	1e c0       	rjmp	.+60     	; 0x638 <DIO_u8_READ_PORT+0x7a>
 5fc:	2d 81       	ldd	r18, Y+5	; 0x05
 5fe:	3e 81       	ldd	r19, Y+6	; 0x06
 600:	22 30       	cpi	r18, 0x02	; 2
 602:	31 05       	cpc	r19, r1
 604:	81 f0       	breq	.+32     	; 0x626 <DIO_u8_READ_PORT+0x68>
 606:	8d 81       	ldd	r24, Y+5	; 0x05
 608:	9e 81       	ldd	r25, Y+6	; 0x06
 60a:	83 30       	cpi	r24, 0x03	; 3
 60c:	91 05       	cpc	r25, r1
 60e:	81 f0       	breq	.+32     	; 0x630 <DIO_u8_READ_PORT+0x72>
 610:	13 c0       	rjmp	.+38     	; 0x638 <DIO_u8_READ_PORT+0x7a>
		case PORTA:
			Value = PINA_REGISTER;
 612:	e9 e3       	ldi	r30, 0x39	; 57
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	80 81       	ld	r24, Z
 618:	8a 83       	std	Y+2, r24	; 0x02
 61a:	0e c0       	rjmp	.+28     	; 0x638 <DIO_u8_READ_PORT+0x7a>
			break;

		case PORTB:
			Value = PINB_REGISTER;
 61c:	e6 e3       	ldi	r30, 0x36	; 54
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	80 81       	ld	r24, Z
 622:	8a 83       	std	Y+2, r24	; 0x02
 624:	09 c0       	rjmp	.+18     	; 0x638 <DIO_u8_READ_PORT+0x7a>
			break;

		case PORTC:
			Value = PINC_REGISTER;
 626:	e3 e3       	ldi	r30, 0x33	; 51
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	80 81       	ld	r24, Z
 62c:	8a 83       	std	Y+2, r24	; 0x02
 62e:	04 c0       	rjmp	.+8      	; 0x638 <DIO_u8_READ_PORT+0x7a>
			break;

		case PORTD:
			Value = PIND_REGISTER;
 630:	e0 e3       	ldi	r30, 0x30	; 48
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	80 81       	ld	r24, Z
 636:	8a 83       	std	Y+2, r24	; 0x02
			break;
		}
		return Value;
 638:	9a 81       	ldd	r25, Y+2	; 0x02
 63a:	9c 83       	std	Y+4, r25	; 0x04
 63c:	03 c0       	rjmp	.+6      	; 0x644 <DIO_u8_READ_PORT+0x86>
	}else{
		u8 Local_u8_error_state=ERR;
 63e:	19 82       	std	Y+1, r1	; 0x01
		return Local_u8_error_state;
 640:	29 81       	ldd	r18, Y+1	; 0x01
 642:	2c 83       	std	Y+4, r18	; 0x04
 644:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
 646:	26 96       	adiw	r28, 0x06	; 6
 648:	0f b6       	in	r0, 0x3f	; 63
 64a:	f8 94       	cli
 64c:	de bf       	out	0x3e, r29	; 62
 64e:	0f be       	out	0x3f, r0	; 63
 650:	cd bf       	out	0x3d, r28	; 61
 652:	cf 91       	pop	r28
 654:	df 91       	pop	r29
 656:	08 95       	ret

00000658 <DIO_u8_READ_PIN>:
u8 DIO_u8_READ_PIN(u8 Port , u8 Pin)
{
 658:	df 93       	push	r29
 65a:	cf 93       	push	r28
 65c:	cd b7       	in	r28, 0x3d	; 61
 65e:	de b7       	in	r29, 0x3e	; 62
 660:	27 97       	sbiw	r28, 0x07	; 7
 662:	0f b6       	in	r0, 0x3f	; 63
 664:	f8 94       	cli
 666:	de bf       	out	0x3e, r29	; 62
 668:	0f be       	out	0x3f, r0	; 63
 66a:	cd bf       	out	0x3d, r28	; 61
 66c:	8b 83       	std	Y+3, r24	; 0x03
 66e:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8_error_state =OK;
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	8a 83       	std	Y+2, r24	; 0x02

	if ((Port >= PORTA && Port <= PORTD) && (Pin >= PIN0 && Pin <= PIN7))
 674:	8b 81       	ldd	r24, Y+3	; 0x03
 676:	84 30       	cpi	r24, 0x04	; 4
 678:	08 f0       	brcs	.+2      	; 0x67c <DIO_u8_READ_PIN+0x24>
 67a:	70 c0       	rjmp	.+224    	; 0x75c <DIO_u8_READ_PIN+0x104>
 67c:	8c 81       	ldd	r24, Y+4	; 0x04
 67e:	88 30       	cpi	r24, 0x08	; 8
 680:	08 f0       	brcs	.+2      	; 0x684 <DIO_u8_READ_PIN+0x2c>
 682:	6c c0       	rjmp	.+216    	; 0x75c <DIO_u8_READ_PIN+0x104>
	{
		Local_u8_error_state = OK;
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	8a 83       	std	Y+2, r24	; 0x02
		u8 Value;
		switch(Port){
 688:	8b 81       	ldd	r24, Y+3	; 0x03
 68a:	28 2f       	mov	r18, r24
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	3f 83       	std	Y+7, r19	; 0x07
 690:	2e 83       	std	Y+6, r18	; 0x06
 692:	4e 81       	ldd	r20, Y+6	; 0x06
 694:	5f 81       	ldd	r21, Y+7	; 0x07
 696:	41 30       	cpi	r20, 0x01	; 1
 698:	51 05       	cpc	r21, r1
 69a:	41 f1       	breq	.+80     	; 0x6ec <DIO_u8_READ_PIN+0x94>
 69c:	8e 81       	ldd	r24, Y+6	; 0x06
 69e:	9f 81       	ldd	r25, Y+7	; 0x07
 6a0:	82 30       	cpi	r24, 0x02	; 2
 6a2:	91 05       	cpc	r25, r1
 6a4:	34 f4       	brge	.+12     	; 0x6b2 <DIO_u8_READ_PIN+0x5a>
 6a6:	2e 81       	ldd	r18, Y+6	; 0x06
 6a8:	3f 81       	ldd	r19, Y+7	; 0x07
 6aa:	21 15       	cp	r18, r1
 6ac:	31 05       	cpc	r19, r1
 6ae:	61 f0       	breq	.+24     	; 0x6c8 <DIO_u8_READ_PIN+0x70>
 6b0:	52 c0       	rjmp	.+164    	; 0x756 <DIO_u8_READ_PIN+0xfe>
 6b2:	4e 81       	ldd	r20, Y+6	; 0x06
 6b4:	5f 81       	ldd	r21, Y+7	; 0x07
 6b6:	42 30       	cpi	r20, 0x02	; 2
 6b8:	51 05       	cpc	r21, r1
 6ba:	51 f1       	breq	.+84     	; 0x710 <DIO_u8_READ_PIN+0xb8>
 6bc:	8e 81       	ldd	r24, Y+6	; 0x06
 6be:	9f 81       	ldd	r25, Y+7	; 0x07
 6c0:	83 30       	cpi	r24, 0x03	; 3
 6c2:	91 05       	cpc	r25, r1
 6c4:	b9 f1       	breq	.+110    	; 0x734 <DIO_u8_READ_PIN+0xdc>
 6c6:	47 c0       	rjmp	.+142    	; 0x756 <DIO_u8_READ_PIN+0xfe>
		case PORTA:
			Value= GET_BIT(PINA_REGISTER,Pin);
 6c8:	e9 e3       	ldi	r30, 0x39	; 57
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	80 81       	ld	r24, Z
 6ce:	28 2f       	mov	r18, r24
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	8c 81       	ldd	r24, Y+4	; 0x04
 6d4:	88 2f       	mov	r24, r24
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	a9 01       	movw	r20, r18
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <DIO_u8_READ_PIN+0x88>
 6dc:	55 95       	asr	r21
 6de:	47 95       	ror	r20
 6e0:	8a 95       	dec	r24
 6e2:	e2 f7       	brpl	.-8      	; 0x6dc <DIO_u8_READ_PIN+0x84>
 6e4:	ca 01       	movw	r24, r20
 6e6:	81 70       	andi	r24, 0x01	; 1
 6e8:	89 83       	std	Y+1, r24	; 0x01
 6ea:	35 c0       	rjmp	.+106    	; 0x756 <DIO_u8_READ_PIN+0xfe>
			break;

		case PORTB:
			Value= GET_BIT(PINB_REGISTER,Pin);
 6ec:	e6 e3       	ldi	r30, 0x36	; 54
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	80 81       	ld	r24, Z
 6f2:	28 2f       	mov	r18, r24
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	8c 81       	ldd	r24, Y+4	; 0x04
 6f8:	88 2f       	mov	r24, r24
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	a9 01       	movw	r20, r18
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <DIO_u8_READ_PIN+0xac>
 700:	55 95       	asr	r21
 702:	47 95       	ror	r20
 704:	8a 95       	dec	r24
 706:	e2 f7       	brpl	.-8      	; 0x700 <DIO_u8_READ_PIN+0xa8>
 708:	ca 01       	movw	r24, r20
 70a:	81 70       	andi	r24, 0x01	; 1
 70c:	89 83       	std	Y+1, r24	; 0x01
 70e:	23 c0       	rjmp	.+70     	; 0x756 <DIO_u8_READ_PIN+0xfe>
			break;

		case PORTC:
			Value= GET_BIT(PINC_REGISTER,Pin);
 710:	e3 e3       	ldi	r30, 0x33	; 51
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	80 81       	ld	r24, Z
 716:	28 2f       	mov	r18, r24
 718:	30 e0       	ldi	r19, 0x00	; 0
 71a:	8c 81       	ldd	r24, Y+4	; 0x04
 71c:	88 2f       	mov	r24, r24
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	a9 01       	movw	r20, r18
 722:	02 c0       	rjmp	.+4      	; 0x728 <DIO_u8_READ_PIN+0xd0>
 724:	55 95       	asr	r21
 726:	47 95       	ror	r20
 728:	8a 95       	dec	r24
 72a:	e2 f7       	brpl	.-8      	; 0x724 <DIO_u8_READ_PIN+0xcc>
 72c:	ca 01       	movw	r24, r20
 72e:	81 70       	andi	r24, 0x01	; 1
 730:	89 83       	std	Y+1, r24	; 0x01
 732:	11 c0       	rjmp	.+34     	; 0x756 <DIO_u8_READ_PIN+0xfe>
			break;

		case PORTD:
			Value= GET_BIT(PIND_REGISTER,Pin);
 734:	e0 e3       	ldi	r30, 0x30	; 48
 736:	f0 e0       	ldi	r31, 0x00	; 0
 738:	80 81       	ld	r24, Z
 73a:	28 2f       	mov	r18, r24
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	8c 81       	ldd	r24, Y+4	; 0x04
 740:	88 2f       	mov	r24, r24
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	a9 01       	movw	r20, r18
 746:	02 c0       	rjmp	.+4      	; 0x74c <DIO_u8_READ_PIN+0xf4>
 748:	55 95       	asr	r21
 74a:	47 95       	ror	r20
 74c:	8a 95       	dec	r24
 74e:	e2 f7       	brpl	.-8      	; 0x748 <DIO_u8_READ_PIN+0xf0>
 750:	ca 01       	movw	r24, r20
 752:	81 70       	andi	r24, 0x01	; 1
 754:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		return Value;
 756:	59 81       	ldd	r21, Y+1	; 0x01
 758:	5d 83       	std	Y+5, r21	; 0x05
 75a:	03 c0       	rjmp	.+6      	; 0x762 <DIO_u8_READ_PIN+0x10a>

	}else{
		Local_u8_error_state=ERR;
 75c:	1a 82       	std	Y+2, r1	; 0x02
		return Local_u8_error_state;
 75e:	8a 81       	ldd	r24, Y+2	; 0x02
 760:	8d 83       	std	Y+5, r24	; 0x05
 762:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
 764:	27 96       	adiw	r28, 0x07	; 7
 766:	0f b6       	in	r0, 0x3f	; 63
 768:	f8 94       	cli
 76a:	de bf       	out	0x3e, r29	; 62
 76c:	0f be       	out	0x3f, r0	; 63
 76e:	cd bf       	out	0x3d, r28	; 61
 770:	cf 91       	pop	r28
 772:	df 91       	pop	r29
 774:	08 95       	ret

00000776 <TIMER_0_INIT>:



//timer 0
void TIMER_0_INIT(u8 mood , u8 prescaler)
{
 776:	df 93       	push	r29
 778:	cf 93       	push	r28
 77a:	00 d0       	rcall	.+0      	; 0x77c <TIMER_0_INIT+0x6>
 77c:	00 d0       	rcall	.+0      	; 0x77e <TIMER_0_INIT+0x8>
 77e:	cd b7       	in	r28, 0x3d	; 61
 780:	de b7       	in	r29, 0x3e	; 62
 782:	89 83       	std	Y+1, r24	; 0x01
 784:	6a 83       	std	Y+2, r22	; 0x02
	TCCR0 = 0b00000000 | mood  | prescaler;
 786:	e3 e5       	ldi	r30, 0x53	; 83
 788:	f0 e0       	ldi	r31, 0x00	; 0
 78a:	99 81       	ldd	r25, Y+1	; 0x01
 78c:	8a 81       	ldd	r24, Y+2	; 0x02
 78e:	89 2b       	or	r24, r25
 790:	80 83       	st	Z, r24

	switch(mood){
 792:	89 81       	ldd	r24, Y+1	; 0x01
 794:	28 2f       	mov	r18, r24
 796:	30 e0       	ldi	r19, 0x00	; 0
 798:	3c 83       	std	Y+4, r19	; 0x04
 79a:	2b 83       	std	Y+3, r18	; 0x03
 79c:	8b 81       	ldd	r24, Y+3	; 0x03
 79e:	9c 81       	ldd	r25, Y+4	; 0x04
 7a0:	00 97       	sbiw	r24, 0x00	; 0
 7a2:	31 f0       	breq	.+12     	; 0x7b0 <TIMER_0_INIT+0x3a>
 7a4:	2b 81       	ldd	r18, Y+3	; 0x03
 7a6:	3c 81       	ldd	r19, Y+4	; 0x04
 7a8:	28 30       	cpi	r18, 0x08	; 8
 7aa:	31 05       	cpc	r19, r1
 7ac:	81 f0       	breq	.+32     	; 0x7ce <TIMER_0_INIT+0x58>
 7ae:	1e c0       	rjmp	.+60     	; 0x7ec <TIMER_0_INIT+0x76>
	case NORMAL_0:
		SET_BIT(TIMSK,0);
 7b0:	a9 e5       	ldi	r26, 0x59	; 89
 7b2:	b0 e0       	ldi	r27, 0x00	; 0
 7b4:	e9 e5       	ldi	r30, 0x59	; 89
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	80 81       	ld	r24, Z
 7ba:	81 60       	ori	r24, 0x01	; 1
 7bc:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,1);
 7be:	a9 e5       	ldi	r26, 0x59	; 89
 7c0:	b0 e0       	ldi	r27, 0x00	; 0
 7c2:	e9 e5       	ldi	r30, 0x59	; 89
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	80 81       	ld	r24, Z
 7c8:	8d 7f       	andi	r24, 0xFD	; 253
 7ca:	8c 93       	st	X, r24
 7cc:	24 c0       	rjmp	.+72     	; 0x816 <TIMER_0_INIT+0xa0>
		break;
	case CTC_0:
		CLEAR_BIT(TIMSK,0);
 7ce:	a9 e5       	ldi	r26, 0x59	; 89
 7d0:	b0 e0       	ldi	r27, 0x00	; 0
 7d2:	e9 e5       	ldi	r30, 0x59	; 89
 7d4:	f0 e0       	ldi	r31, 0x00	; 0
 7d6:	80 81       	ld	r24, Z
 7d8:	8e 7f       	andi	r24, 0xFE	; 254
 7da:	8c 93       	st	X, r24
		SET_BIT(TIMSK,1);
 7dc:	a9 e5       	ldi	r26, 0x59	; 89
 7de:	b0 e0       	ldi	r27, 0x00	; 0
 7e0:	e9 e5       	ldi	r30, 0x59	; 89
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	80 81       	ld	r24, Z
 7e6:	82 60       	ori	r24, 0x02	; 2
 7e8:	8c 93       	st	X, r24
 7ea:	15 c0       	rjmp	.+42     	; 0x816 <TIMER_0_INIT+0xa0>

		break;
	default:
		CLEAR_BIT(TIMSK,0);
 7ec:	a9 e5       	ldi	r26, 0x59	; 89
 7ee:	b0 e0       	ldi	r27, 0x00	; 0
 7f0:	e9 e5       	ldi	r30, 0x59	; 89
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	80 81       	ld	r24, Z
 7f6:	8e 7f       	andi	r24, 0xFE	; 254
 7f8:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,1);// turn off interrupt
 7fa:	a9 e5       	ldi	r26, 0x59	; 89
 7fc:	b0 e0       	ldi	r27, 0x00	; 0
 7fe:	e9 e5       	ldi	r30, 0x59	; 89
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	80 81       	ld	r24, Z
 804:	8d 7f       	andi	r24, 0xFD	; 253
 806:	8c 93       	st	X, r24
		TCCR0 |= 0b0100000; // set pwm mood to clear on OC0 compare
 808:	a3 e5       	ldi	r26, 0x53	; 83
 80a:	b0 e0       	ldi	r27, 0x00	; 0
 80c:	e3 e5       	ldi	r30, 0x53	; 83
 80e:	f0 e0       	ldi	r31, 0x00	; 0
 810:	80 81       	ld	r24, Z
 812:	80 62       	ori	r24, 0x20	; 32
 814:	8c 93       	st	X, r24
		break;
	}
}
 816:	0f 90       	pop	r0
 818:	0f 90       	pop	r0
 81a:	0f 90       	pop	r0
 81c:	0f 90       	pop	r0
 81e:	cf 91       	pop	r28
 820:	df 91       	pop	r29
 822:	08 95       	ret

00000824 <TIMER_0_SET_INIT>:
void TIMER_0_SET_INIT(u8 initial_time)
{
 824:	df 93       	push	r29
 826:	cf 93       	push	r28
 828:	0f 92       	push	r0
 82a:	cd b7       	in	r28, 0x3d	; 61
 82c:	de b7       	in	r29, 0x3e	; 62
 82e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = initial_time;
 830:	e2 e5       	ldi	r30, 0x52	; 82
 832:	f0 e0       	ldi	r31, 0x00	; 0
 834:	89 81       	ldd	r24, Y+1	; 0x01
 836:	80 83       	st	Z, r24
}
 838:	0f 90       	pop	r0
 83a:	cf 91       	pop	r28
 83c:	df 91       	pop	r29
 83e:	08 95       	ret

00000840 <TIMER_0_SET_COMPARE>:
void TIMER_0_SET_COMPARE(u8 compare_time)
{
 840:	df 93       	push	r29
 842:	cf 93       	push	r28
 844:	0f 92       	push	r0
 846:	cd b7       	in	r28, 0x3d	; 61
 848:	de b7       	in	r29, 0x3e	; 62
 84a:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = compare_time;
 84c:	ec e5       	ldi	r30, 0x5C	; 92
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	89 81       	ldd	r24, Y+1	; 0x01
 852:	80 83       	st	Z, r24
}
 854:	0f 90       	pop	r0
 856:	cf 91       	pop	r28
 858:	df 91       	pop	r29
 85a:	08 95       	ret

0000085c <TIMER_0_GET_TCNT>:
u8 TIMER_0_GET_TCNT(){
 85c:	df 93       	push	r29
 85e:	cf 93       	push	r28
 860:	cd b7       	in	r28, 0x3d	; 61
 862:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
 864:	e2 e5       	ldi	r30, 0x52	; 82
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	80 81       	ld	r24, Z
}
 86a:	cf 91       	pop	r28
 86c:	df 91       	pop	r29
 86e:	08 95       	ret

00000870 <TIMER_1_SET_INT_EDGE>:

//timer 1

void TIMER_1_SET_INT_EDGE(u8 edge){
 870:	df 93       	push	r29
 872:	cf 93       	push	r28
 874:	00 d0       	rcall	.+0      	; 0x876 <TIMER_1_SET_INT_EDGE+0x6>
 876:	0f 92       	push	r0
 878:	cd b7       	in	r28, 0x3d	; 61
 87a:	de b7       	in	r29, 0x3e	; 62
 87c:	89 83       	std	Y+1, r24	; 0x01
	switch(edge){
 87e:	89 81       	ldd	r24, Y+1	; 0x01
 880:	28 2f       	mov	r18, r24
 882:	30 e0       	ldi	r19, 0x00	; 0
 884:	3b 83       	std	Y+3, r19	; 0x03
 886:	2a 83       	std	Y+2, r18	; 0x02
 888:	8a 81       	ldd	r24, Y+2	; 0x02
 88a:	9b 81       	ldd	r25, Y+3	; 0x03
 88c:	00 97       	sbiw	r24, 0x00	; 0
 88e:	31 f0       	breq	.+12     	; 0x89c <TIMER_1_SET_INT_EDGE+0x2c>
 890:	2a 81       	ldd	r18, Y+2	; 0x02
 892:	3b 81       	ldd	r19, Y+3	; 0x03
 894:	21 30       	cpi	r18, 0x01	; 1
 896:	31 05       	cpc	r19, r1
 898:	49 f0       	breq	.+18     	; 0x8ac <TIMER_1_SET_INT_EDGE+0x3c>
 89a:	0f c0       	rjmp	.+30     	; 0x8ba <TIMER_1_SET_INT_EDGE+0x4a>
	case RISE:
		SET_BIT(TCCR1B,6);
 89c:	ae e4       	ldi	r26, 0x4E	; 78
 89e:	b0 e0       	ldi	r27, 0x00	; 0
 8a0:	ee e4       	ldi	r30, 0x4E	; 78
 8a2:	f0 e0       	ldi	r31, 0x00	; 0
 8a4:	80 81       	ld	r24, Z
 8a6:	80 64       	ori	r24, 0x40	; 64
 8a8:	8c 93       	st	X, r24
 8aa:	07 c0       	rjmp	.+14     	; 0x8ba <TIMER_1_SET_INT_EDGE+0x4a>
		break;
	case  FALL:
		CLEAR_BIT(TCCR1B,6);
 8ac:	ae e4       	ldi	r26, 0x4E	; 78
 8ae:	b0 e0       	ldi	r27, 0x00	; 0
 8b0:	ee e4       	ldi	r30, 0x4E	; 78
 8b2:	f0 e0       	ldi	r31, 0x00	; 0
 8b4:	80 81       	ld	r24, Z
 8b6:	8f 7b       	andi	r24, 0xBF	; 191
 8b8:	8c 93       	st	X, r24
		break;
	}
}
 8ba:	0f 90       	pop	r0
 8bc:	0f 90       	pop	r0
 8be:	0f 90       	pop	r0
 8c0:	cf 91       	pop	r28
 8c2:	df 91       	pop	r29
 8c4:	08 95       	ret

000008c6 <TIMER_1_INIT>:
void TIMER_1_INIT(u8 mood, u8 prescaler , u8 channel)
{
 8c6:	df 93       	push	r29
 8c8:	cf 93       	push	r28
 8ca:	cd b7       	in	r28, 0x3d	; 61
 8cc:	de b7       	in	r29, 0x3e	; 62
 8ce:	27 97       	sbiw	r28, 0x07	; 7
 8d0:	0f b6       	in	r0, 0x3f	; 63
 8d2:	f8 94       	cli
 8d4:	de bf       	out	0x3e, r29	; 62
 8d6:	0f be       	out	0x3f, r0	; 63
 8d8:	cd bf       	out	0x3d, r28	; 61
 8da:	89 83       	std	Y+1, r24	; 0x01
 8dc:	6a 83       	std	Y+2, r22	; 0x02
 8de:	4b 83       	std	Y+3, r20	; 0x03
		switch(mood){
 8e0:	89 81       	ldd	r24, Y+1	; 0x01
 8e2:	28 2f       	mov	r18, r24
 8e4:	30 e0       	ldi	r19, 0x00	; 0
 8e6:	3f 83       	std	Y+7, r19	; 0x07
 8e8:	2e 83       	std	Y+6, r18	; 0x06
 8ea:	8e 81       	ldd	r24, Y+6	; 0x06
 8ec:	9f 81       	ldd	r25, Y+7	; 0x07
 8ee:	00 97       	sbiw	r24, 0x00	; 0
 8f0:	31 f0       	breq	.+12     	; 0x8fe <TIMER_1_INIT+0x38>
 8f2:	2e 81       	ldd	r18, Y+6	; 0x06
 8f4:	3f 81       	ldd	r19, Y+7	; 0x07
 8f6:	21 30       	cpi	r18, 0x01	; 1
 8f8:	31 05       	cpc	r19, r1
 8fa:	59 f1       	breq	.+86     	; 0x952 <TIMER_1_INIT+0x8c>
 8fc:	63 c0       	rjmp	.+198    	; 0x9c4 <TIMER_1_INIT+0xfe>
			case NORMAL_1:
				//common
				// wgm13-10 = 0000
				// cs12-10 = prescaler
				// TCCR1B is same for every case
				TCCR1B = 0b00000000 | prescaler;
 8fe:	ee e4       	ldi	r30, 0x4E	; 78
 900:	f0 e0       	ldi	r31, 0x00	; 0
 902:	8a 81       	ldd	r24, Y+2	; 0x02
 904:	80 83       	st	Z, r24
				TIMER_1_SET_INT_EDGE(FALL);
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	0e 94 38 04 	call	0x870	; 0x870 <TIMER_1_SET_INT_EDGE>
				TCCR1A |= 0b00000000;
 90c:	af e4       	ldi	r26, 0x4F	; 79
 90e:	b0 e0       	ldi	r27, 0x00	; 0
 910:	ef e4       	ldi	r30, 0x4F	; 79
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	80 81       	ld	r24, Z
 916:	8c 93       	st	X, r24

				SET_BIT(TIMSK, 2);
 918:	a9 e5       	ldi	r26, 0x59	; 89
 91a:	b0 e0       	ldi	r27, 0x00	; 0
 91c:	e9 e5       	ldi	r30, 0x59	; 89
 91e:	f0 e0       	ldi	r31, 0x00	; 0
 920:	80 81       	ld	r24, Z
 922:	84 60       	ori	r24, 0x04	; 4
 924:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK,3);
 926:	a9 e5       	ldi	r26, 0x59	; 89
 928:	b0 e0       	ldi	r27, 0x00	; 0
 92a:	e9 e5       	ldi	r30, 0x59	; 89
 92c:	f0 e0       	ldi	r31, 0x00	; 0
 92e:	80 81       	ld	r24, Z
 930:	87 7f       	andi	r24, 0xF7	; 247
 932:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK,4);
 934:	a9 e5       	ldi	r26, 0x59	; 89
 936:	b0 e0       	ldi	r27, 0x00	; 0
 938:	e9 e5       	ldi	r30, 0x59	; 89
 93a:	f0 e0       	ldi	r31, 0x00	; 0
 93c:	80 81       	ld	r24, Z
 93e:	8f 7e       	andi	r24, 0xEF	; 239
 940:	8c 93       	st	X, r24
				SET_BIT(TIMSK, 5);
 942:	a9 e5       	ldi	r26, 0x59	; 89
 944:	b0 e0       	ldi	r27, 0x00	; 0
 946:	e9 e5       	ldi	r30, 0x59	; 89
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	80 81       	ld	r24, Z
 94c:	80 62       	ori	r24, 0x20	; 32
 94e:	8c 93       	st	X, r24
 950:	39 c0       	rjmp	.+114    	; 0x9c4 <TIMER_1_INIT+0xfe>
				break;

			case F_PWM_1:
				// disable interrupt if enabled
				CLEAR_BIT(TIMSK, 2);
 952:	a9 e5       	ldi	r26, 0x59	; 89
 954:	b0 e0       	ldi	r27, 0x00	; 0
 956:	e9 e5       	ldi	r30, 0x59	; 89
 958:	f0 e0       	ldi	r31, 0x00	; 0
 95a:	80 81       	ld	r24, Z
 95c:	8b 7f       	andi	r24, 0xFB	; 251
 95e:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK,3);
 960:	a9 e5       	ldi	r26, 0x59	; 89
 962:	b0 e0       	ldi	r27, 0x00	; 0
 964:	e9 e5       	ldi	r30, 0x59	; 89
 966:	f0 e0       	ldi	r31, 0x00	; 0
 968:	80 81       	ld	r24, Z
 96a:	87 7f       	andi	r24, 0xF7	; 247
 96c:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK,4);
 96e:	a9 e5       	ldi	r26, 0x59	; 89
 970:	b0 e0       	ldi	r27, 0x00	; 0
 972:	e9 e5       	ldi	r30, 0x59	; 89
 974:	f0 e0       	ldi	r31, 0x00	; 0
 976:	80 81       	ld	r24, Z
 978:	8f 7e       	andi	r24, 0xEF	; 239
 97a:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, 5);
 97c:	a9 e5       	ldi	r26, 0x59	; 89
 97e:	b0 e0       	ldi	r27, 0x00	; 0
 980:	e9 e5       	ldi	r30, 0x59	; 89
 982:	f0 e0       	ldi	r31, 0x00	; 0
 984:	80 81       	ld	r24, Z
 986:	8f 7d       	andi	r24, 0xDF	; 223
 988:	8c 93       	st	X, r24

				TCCR1B = 0b00011000 | prescaler;
 98a:	ee e4       	ldi	r30, 0x4E	; 78
 98c:	f0 e0       	ldi	r31, 0x00	; 0
 98e:	8a 81       	ldd	r24, Y+2	; 0x02
 990:	88 61       	ori	r24, 0x18	; 24
 992:	80 83       	st	Z, r24
				//common
				// wgm13-10 = 1110

				switch(channel){
 994:	8b 81       	ldd	r24, Y+3	; 0x03
 996:	28 2f       	mov	r18, r24
 998:	30 e0       	ldi	r19, 0x00	; 0
 99a:	3d 83       	std	Y+5, r19	; 0x05
 99c:	2c 83       	std	Y+4, r18	; 0x04
 99e:	8c 81       	ldd	r24, Y+4	; 0x04
 9a0:	9d 81       	ldd	r25, Y+5	; 0x05
 9a2:	00 97       	sbiw	r24, 0x00	; 0
 9a4:	31 f0       	breq	.+12     	; 0x9b2 <TIMER_1_INIT+0xec>
 9a6:	2c 81       	ldd	r18, Y+4	; 0x04
 9a8:	3d 81       	ldd	r19, Y+5	; 0x05
 9aa:	21 30       	cpi	r18, 0x01	; 1
 9ac:	31 05       	cpc	r19, r1
 9ae:	31 f0       	breq	.+12     	; 0x9bc <TIMER_1_INIT+0xf6>
 9b0:	09 c0       	rjmp	.+18     	; 0x9c4 <TIMER_1_INIT+0xfe>
					case CHANNEL_A:
						TCCR1A = 0b10000000 | 0b00000010;
 9b2:	ef e4       	ldi	r30, 0x4F	; 79
 9b4:	f0 e0       	ldi	r31, 0x00	; 0
 9b6:	82 e8       	ldi	r24, 0x82	; 130
 9b8:	80 83       	st	Z, r24
 9ba:	04 c0       	rjmp	.+8      	; 0x9c4 <TIMER_1_INIT+0xfe>
						break;
					case CHANNEL_B:
						TCCR1A = 0b00100000 | 0b00000010;
 9bc:	ef e4       	ldi	r30, 0x4F	; 79
 9be:	f0 e0       	ldi	r31, 0x00	; 0
 9c0:	82 e2       	ldi	r24, 0x22	; 34
 9c2:	80 83       	st	Z, r24
				}
				break;
			}
}
 9c4:	27 96       	adiw	r28, 0x07	; 7
 9c6:	0f b6       	in	r0, 0x3f	; 63
 9c8:	f8 94       	cli
 9ca:	de bf       	out	0x3e, r29	; 62
 9cc:	0f be       	out	0x3f, r0	; 63
 9ce:	cd bf       	out	0x3d, r28	; 61
 9d0:	cf 91       	pop	r28
 9d2:	df 91       	pop	r29
 9d4:	08 95       	ret

000009d6 <TIMER_1_SET_COMPARE>:

void TIMER_1_SET_COMPARE(u8 channel,u16 compare_value)
{
 9d6:	df 93       	push	r29
 9d8:	cf 93       	push	r28
 9da:	00 d0       	rcall	.+0      	; 0x9dc <TIMER_1_SET_COMPARE+0x6>
 9dc:	00 d0       	rcall	.+0      	; 0x9de <TIMER_1_SET_COMPARE+0x8>
 9de:	0f 92       	push	r0
 9e0:	cd b7       	in	r28, 0x3d	; 61
 9e2:	de b7       	in	r29, 0x3e	; 62
 9e4:	89 83       	std	Y+1, r24	; 0x01
 9e6:	7b 83       	std	Y+3, r23	; 0x03
 9e8:	6a 83       	std	Y+2, r22	; 0x02
	switch(channel){
 9ea:	89 81       	ldd	r24, Y+1	; 0x01
 9ec:	28 2f       	mov	r18, r24
 9ee:	30 e0       	ldi	r19, 0x00	; 0
 9f0:	3d 83       	std	Y+5, r19	; 0x05
 9f2:	2c 83       	std	Y+4, r18	; 0x04
 9f4:	8c 81       	ldd	r24, Y+4	; 0x04
 9f6:	9d 81       	ldd	r25, Y+5	; 0x05
 9f8:	00 97       	sbiw	r24, 0x00	; 0
 9fa:	31 f0       	breq	.+12     	; 0xa08 <TIMER_1_SET_COMPARE+0x32>
 9fc:	2c 81       	ldd	r18, Y+4	; 0x04
 9fe:	3d 81       	ldd	r19, Y+5	; 0x05
 a00:	21 30       	cpi	r18, 0x01	; 1
 a02:	31 05       	cpc	r19, r1
 a04:	41 f0       	breq	.+16     	; 0xa16 <TIMER_1_SET_COMPARE+0x40>
 a06:	0d c0       	rjmp	.+26     	; 0xa22 <TIMER_1_SET_COMPARE+0x4c>
	case CHANNEL_A:
		OCR1A = compare_value;
 a08:	ea e4       	ldi	r30, 0x4A	; 74
 a0a:	f0 e0       	ldi	r31, 0x00	; 0
 a0c:	8a 81       	ldd	r24, Y+2	; 0x02
 a0e:	9b 81       	ldd	r25, Y+3	; 0x03
 a10:	91 83       	std	Z+1, r25	; 0x01
 a12:	80 83       	st	Z, r24
 a14:	06 c0       	rjmp	.+12     	; 0xa22 <TIMER_1_SET_COMPARE+0x4c>
		break;
	case CHANNEL_B:
		OCR1B= compare_value;
 a16:	e8 e4       	ldi	r30, 0x48	; 72
 a18:	f0 e0       	ldi	r31, 0x00	; 0
 a1a:	8a 81       	ldd	r24, Y+2	; 0x02
 a1c:	9b 81       	ldd	r25, Y+3	; 0x03
 a1e:	91 83       	std	Z+1, r25	; 0x01
 a20:	80 83       	st	Z, r24
	}
}
 a22:	0f 90       	pop	r0
 a24:	0f 90       	pop	r0
 a26:	0f 90       	pop	r0
 a28:	0f 90       	pop	r0
 a2a:	0f 90       	pop	r0
 a2c:	cf 91       	pop	r28
 a2e:	df 91       	pop	r29
 a30:	08 95       	ret

00000a32 <TIMER_1_SET_ICR>:

void TIMER_1_SET_ICR(u16 icr_value)
{
 a32:	df 93       	push	r29
 a34:	cf 93       	push	r28
 a36:	00 d0       	rcall	.+0      	; 0xa38 <TIMER_1_SET_ICR+0x6>
 a38:	cd b7       	in	r28, 0x3d	; 61
 a3a:	de b7       	in	r29, 0x3e	; 62
 a3c:	9a 83       	std	Y+2, r25	; 0x02
 a3e:	89 83       	std	Y+1, r24	; 0x01
	ICR1=icr_value;
 a40:	e6 e4       	ldi	r30, 0x46	; 70
 a42:	f0 e0       	ldi	r31, 0x00	; 0
 a44:	89 81       	ldd	r24, Y+1	; 0x01
 a46:	9a 81       	ldd	r25, Y+2	; 0x02
 a48:	91 83       	std	Z+1, r25	; 0x01
 a4a:	80 83       	st	Z, r24
}
 a4c:	0f 90       	pop	r0
 a4e:	0f 90       	pop	r0
 a50:	cf 91       	pop	r28
 a52:	df 91       	pop	r29
 a54:	08 95       	ret

00000a56 <TIMER_1_GET_ICR>:

u16 TIMER_1_GET_ICR(){
 a56:	df 93       	push	r29
 a58:	cf 93       	push	r28
 a5a:	cd b7       	in	r28, 0x3d	; 61
 a5c:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
 a5e:	e6 e4       	ldi	r30, 0x46	; 70
 a60:	f0 e0       	ldi	r31, 0x00	; 0
 a62:	80 81       	ld	r24, Z
 a64:	91 81       	ldd	r25, Z+1	; 0x01
}
 a66:	cf 91       	pop	r28
 a68:	df 91       	pop	r29
 a6a:	08 95       	ret

00000a6c <UART_INIT>:

#include "BIT_MATH.h"
#include "UART_REGISTER.h"
#include "UART.h"

void UART_INIT(){
 a6c:	df 93       	push	r29
 a6e:	cf 93       	push	r28
 a70:	cd b7       	in	r28, 0x3d	; 61
 a72:	de b7       	in	r29, 0x3e	; 62
	// enable send and recieve
	SET_BIT(UCSRB, RXEN);
 a74:	aa e2       	ldi	r26, 0x2A	; 42
 a76:	b0 e0       	ldi	r27, 0x00	; 0
 a78:	ea e2       	ldi	r30, 0x2A	; 42
 a7a:	f0 e0       	ldi	r31, 0x00	; 0
 a7c:	80 81       	ld	r24, Z
 a7e:	80 61       	ori	r24, 0x10	; 16
 a80:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);
 a82:	aa e2       	ldi	r26, 0x2A	; 42
 a84:	b0 e0       	ldi	r27, 0x00	; 0
 a86:	ea e2       	ldi	r30, 0x2A	; 42
 a88:	f0 e0       	ldi	r31, 0x00	; 0
 a8a:	80 81       	ld	r24, Z
 a8c:	88 60       	ori	r24, 0x08	; 8
 a8e:	8c 93       	st	X, r24

	//set data bit size to 8 bit

	SET_BIT(UCSRC, 7);
 a90:	a0 e4       	ldi	r26, 0x40	; 64
 a92:	b0 e0       	ldi	r27, 0x00	; 0
 a94:	e0 e4       	ldi	r30, 0x40	; 64
 a96:	f0 e0       	ldi	r31, 0x00	; 0
 a98:	80 81       	ld	r24, Z
 a9a:	80 68       	ori	r24, 0x80	; 128
 a9c:	8c 93       	st	X, r24

	CLEAR_BIT(UCSRB, UCSZ2);
 a9e:	aa e2       	ldi	r26, 0x2A	; 42
 aa0:	b0 e0       	ldi	r27, 0x00	; 0
 aa2:	ea e2       	ldi	r30, 0x2A	; 42
 aa4:	f0 e0       	ldi	r31, 0x00	; 0
 aa6:	80 81       	ld	r24, Z
 aa8:	8b 7f       	andi	r24, 0xFB	; 251
 aaa:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ1);
 aac:	a0 e4       	ldi	r26, 0x40	; 64
 aae:	b0 e0       	ldi	r27, 0x00	; 0
 ab0:	e0 e4       	ldi	r30, 0x40	; 64
 ab2:	f0 e0       	ldi	r31, 0x00	; 0
 ab4:	80 81       	ld	r24, Z
 ab6:	84 60       	ori	r24, 0x04	; 4
 ab8:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ0);
 aba:	a0 e4       	ldi	r26, 0x40	; 64
 abc:	b0 e0       	ldi	r27, 0x00	; 0
 abe:	e0 e4       	ldi	r30, 0x40	; 64
 ac0:	f0 e0       	ldi	r31, 0x00	; 0
 ac2:	80 81       	ld	r24, Z
 ac4:	82 60       	ori	r24, 0x02	; 2
 ac6:	8c 93       	st	X, r24

	//set baud rate to 9600 at 8 mhz
	UBRRL = 51;
 ac8:	e9 e2       	ldi	r30, 0x29	; 41
 aca:	f0 e0       	ldi	r31, 0x00	; 0
 acc:	83 e3       	ldi	r24, 0x33	; 51
 ace:	80 83       	st	Z, r24
}
 ad0:	cf 91       	pop	r28
 ad2:	df 91       	pop	r29
 ad4:	08 95       	ret

00000ad6 <UART_SEND_DATA>:



void UART_SEND_DATA(u8 data){
 ad6:	df 93       	push	r29
 ad8:	cf 93       	push	r28
 ada:	0f 92       	push	r0
 adc:	cd b7       	in	r28, 0x3d	; 61
 ade:	de b7       	in	r29, 0x3e	; 62
 ae0:	89 83       	std	Y+1, r24	; 0x01
	//udre=1 --> buffer empty
	while(GET_BIT(UCSRA, UDRE)==0){}
 ae2:	eb e2       	ldi	r30, 0x2B	; 43
 ae4:	f0 e0       	ldi	r31, 0x00	; 0
 ae6:	80 81       	ld	r24, Z
 ae8:	82 95       	swap	r24
 aea:	86 95       	lsr	r24
 aec:	87 70       	andi	r24, 0x07	; 7
 aee:	88 2f       	mov	r24, r24
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	81 70       	andi	r24, 0x01	; 1
 af4:	90 70       	andi	r25, 0x00	; 0
 af6:	00 97       	sbiw	r24, 0x00	; 0
 af8:	a1 f3       	breq	.-24     	; 0xae2 <UART_SEND_DATA+0xc>
	UDR=data;
 afa:	ec e2       	ldi	r30, 0x2C	; 44
 afc:	f0 e0       	ldi	r31, 0x00	; 0
 afe:	89 81       	ldd	r24, Y+1	; 0x01
 b00:	80 83       	st	Z, r24
}
 b02:	0f 90       	pop	r0
 b04:	cf 91       	pop	r28
 b06:	df 91       	pop	r29
 b08:	08 95       	ret

00000b0a <UART_RECIEVE_DATA>:

u8 UART_RECIEVE_DATA(){
 b0a:	df 93       	push	r29
 b0c:	cf 93       	push	r28
 b0e:	cd b7       	in	r28, 0x3d	; 61
 b10:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA, RXC)==0){}
 b12:	eb e2       	ldi	r30, 0x2B	; 43
 b14:	f0 e0       	ldi	r31, 0x00	; 0
 b16:	80 81       	ld	r24, Z
 b18:	88 23       	and	r24, r24
 b1a:	dc f7       	brge	.-10     	; 0xb12 <UART_RECIEVE_DATA+0x8>
	return UDR;
 b1c:	ec e2       	ldi	r30, 0x2C	; 44
 b1e:	f0 e0       	ldi	r31, 0x00	; 0
 b20:	80 81       	ld	r24, Z
}
 b22:	cf 91       	pop	r28
 b24:	df 91       	pop	r29
 b26:	08 95       	ret

00000b28 <main>:

u8 req;
u8 id;
u8 command;

void main(){
 b28:	df 93       	push	r29
 b2a:	cf 93       	push	r28
 b2c:	0f 92       	push	r0
 b2e:	cd b7       	in	r28, 0x3d	; 61
 b30:	de b7       	in	r29, 0x3e	; 62
	//SLAVE 2
	UART_INIT();
 b32:	0e 94 36 05 	call	0xa6c	; 0xa6c <UART_INIT>

	DIO_u8_SET_PIN(PORTB , PIN3 , OUTPUT);
 b36:	81 e0       	ldi	r24, 0x01	; 1
 b38:	63 e0       	ldi	r22, 0x03	; 3
 b3a:	41 e0       	ldi	r20, 0x01	; 1
 b3c:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8_SET_PIN>

	TIMER_0_SET_COMPARE(0);
 b40:	80 e0       	ldi	r24, 0x00	; 0
 b42:	0e 94 20 04 	call	0x840	; 0x840 <TIMER_0_SET_COMPARE>
	TIMER_0_INIT(F_PWM_0 , PRE_8);
 b46:	88 e4       	ldi	r24, 0x48	; 72
 b48:	62 e0       	ldi	r22, 0x02	; 2
 b4a:	0e 94 bb 03 	call	0x776	; 0x776 <TIMER_0_INIT>


	while(1){

		req = UART_RECIEVE_DATA();
 b4e:	0e 94 85 05 	call	0xb0a	; 0xb0a <UART_RECIEVE_DATA>
 b52:	80 93 60 00 	sts	0x0060, r24
		id = req & 0b11000000;
 b56:	80 91 60 00 	lds	r24, 0x0060
 b5a:	80 7c       	andi	r24, 0xC0	; 192
 b5c:	80 93 62 00 	sts	0x0062, r24
		command = req & 0b00111111;
 b60:	80 91 60 00 	lds	r24, 0x0060
 b64:	8f 73       	andi	r24, 0x3F	; 63
 b66:	80 93 61 00 	sts	0x0061, r24

		if(id == SLAVE_ID){
 b6a:	80 91 62 00 	lds	r24, 0x0062
 b6e:	80 38       	cpi	r24, 0x80	; 128
 b70:	81 f4       	brne	.+32     	; 0xb92 <main+0x6a>
			switch(command)
 b72:	80 91 61 00 	lds	r24, 0x0061
 b76:	88 2f       	mov	r24, r24
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	00 97       	sbiw	r24, 0x00	; 0
 b7c:	39 f4       	brne	.+14     	; 0xb8c <main+0x64>
			{
			case MOTOR:
			{
				u8 data= UART_RECIEVE_DATA();
 b7e:	0e 94 85 05 	call	0xb0a	; 0xb0a <UART_RECIEVE_DATA>
 b82:	89 83       	std	Y+1, r24	; 0x01

				TIMER_0_SET_COMPARE(data);
 b84:	89 81       	ldd	r24, Y+1	; 0x01
 b86:	0e 94 20 04 	call	0x840	; 0x840 <TIMER_0_SET_COMPARE>
 b8a:	e1 cf       	rjmp	.-62     	; 0xb4e <main+0x26>

				break;
			}
			default:
				UART_RECIEVE_DATA();
 b8c:	0e 94 85 05 	call	0xb0a	; 0xb0a <UART_RECIEVE_DATA>
 b90:	de cf       	rjmp	.-68     	; 0xb4e <main+0x26>
				break;
			}
		}else{
			UART_RECIEVE_DATA();
 b92:	0e 94 85 05 	call	0xb0a	; 0xb0a <UART_RECIEVE_DATA>
 b96:	db cf       	rjmp	.-74     	; 0xb4e <main+0x26>

00000b98 <_exit>:
 b98:	f8 94       	cli

00000b9a <__stop_program>:
 b9a:	ff cf       	rjmp	.-2      	; 0xb9a <__stop_program>
