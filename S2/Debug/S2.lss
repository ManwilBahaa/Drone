
S2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00001c24  00001cb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800168  00800168  00001dc0  2**0
                  ALLOC
  3 .stab         000014dc  00000000  00000000  00001dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006c8  00000000  00000000  0000329c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00003964  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  00003ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  00003c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  00005b87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  00006c59  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00007c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  00007e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  000080f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000089e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ab 36       	cpi	r26, 0x6B	; 107
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 e2       	ldi	r30, 0x24	; 36
      78:	fc e1       	ldi	r31, 0x1C	; 28
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <main>
      8a:	0c 94 10 0e 	jmp	0x1c20	; 0x1c20 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d9 0d 	jmp	0x1bb2	; 0x1bb2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f5 0d 	jmp	0x1bea	; 0x1bea <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d9 0d 	jmp	0x1bb2	; 0x1bb2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f5 0d 	jmp	0x1bea	; 0x1bea <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fd 0d 	jmp	0x1bfa	; 0x1bfa <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e9 0d 	jmp	0x1bd2	; 0x1bd2 <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__stack+0xb>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__stack+0xb>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__stack+0x15>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__stack+0x1f>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__stack+0xb>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__stack+0x15>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__stack+0x1f>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__stack+0x27>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 fd 0d 	jmp	0x1bfa	; 0x1bfa <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e8 59       	subi	r30, 0x98	; 152
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <ADC_INIT>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "INTERRUPT.h"

void ADC_INIT()
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
											101 - 32
											110 - 64
											111 - 128 )
	 */

	ADMUX = 0b01000000;
     d76:	e7 e2       	ldi	r30, 0x27	; 39
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 e4       	ldi	r24, 0x40	; 64
     d7c:	80 83       	st	Z, r24

	// enable adc - set prescaler to 128 division
	ADCSRA = 0b10000111;
     d7e:	e6 e2       	ldi	r30, 0x26	; 38
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	87 e8       	ldi	r24, 0x87	; 135
     d84:	80 83       	st	Z, r24

}
     d86:	cf 91       	pop	r28
     d88:	df 91       	pop	r29
     d8a:	08 95       	ret

00000d8c <ADC_u16_READ>:

u16 ADC_u16_READ(u8 channel)
{
     d8c:	df 93       	push	r29
     d8e:	cf 93       	push	r28
     d90:	00 d0       	rcall	.+0      	; 0xd92 <ADC_u16_READ+0x6>
     d92:	0f 92       	push	r0
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
     d98:	8b 83       	std	Y+3, r24	; 0x03
	channel &=0b00000111;
     d9a:	8b 81       	ldd	r24, Y+3	; 0x03
     d9c:	87 70       	andi	r24, 0x07	; 7
     d9e:	8b 83       	std	Y+3, r24	; 0x03
	ADMUX &= 0b11100000;
     da0:	a7 e2       	ldi	r26, 0x27	; 39
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e7 e2       	ldi	r30, 0x27	; 39
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	80 7e       	andi	r24, 0xE0	; 224
     dac:	8c 93       	st	X, r24

	ADMUX |= channel;
     dae:	a7 e2       	ldi	r26, 0x27	; 39
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e7 e2       	ldi	r30, 0x27	; 39
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	90 81       	ld	r25, Z
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	89 2b       	or	r24, r25
     dbc:	8c 93       	st	X, r24
	// disable interrupts
	INTERRUPT_GIE_DISABLE();
     dbe:	0e 94 9f 0a 	call	0x153e	; 0x153e <INTERRUPT_GIE_DISABLE>

	// start conversation , enable adc interrupt , set prescaler to 123
	ADCSRA |=0b01001111;
     dc2:	a6 e2       	ldi	r26, 0x26	; 38
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e6 e2       	ldi	r30, 0x26	; 38
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	8f 64       	ori	r24, 0x4F	; 79
     dce:	8c 93       	st	X, r24

	while(GET_BIT(ADCSRA , 4)==0){}
     dd0:	e6 e2       	ldi	r30, 0x26	; 38
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	82 95       	swap	r24
     dd8:	8f 70       	andi	r24, 0x0F	; 15
     dda:	88 2f       	mov	r24, r24
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	81 70       	andi	r24, 0x01	; 1
     de0:	90 70       	andi	r25, 0x00	; 0
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	a9 f3       	breq	.-22     	; 0xdd0 <ADC_u16_READ+0x44>

	// clear interrupt flag
	SET_BIT(ADCSRA , 4);
     de6:	a6 e2       	ldi	r26, 0x26	; 38
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e6 e2       	ldi	r30, 0x26	; 38
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	80 61       	ori	r24, 0x10	; 16
     df2:	8c 93       	st	X, r24

	// enable interrupts
	INTERRUPT_GIE_ENABLE();
     df4:	0e 94 91 0a 	call	0x1522	; 0x1522 <INTERRUPT_GIE_ENABLE>


	u16 data =  ADCL | ADCH<<8;
     df8:	e4 e2       	ldi	r30, 0x24	; 36
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	e5 e2       	ldi	r30, 0x25	; 37
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	88 2f       	mov	r24, r24
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	98 2f       	mov	r25, r24
     e0e:	88 27       	eor	r24, r24
     e10:	82 2b       	or	r24, r18
     e12:	93 2b       	or	r25, r19
     e14:	9a 83       	std	Y+2, r25	; 0x02
     e16:	89 83       	std	Y+1, r24	; 0x01

	return data;
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	9a 81       	ldd	r25, Y+2	; 0x02

}
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	08 95       	ret

00000e28 <DIO_u8_SET_PIN>:
#include "STD_TYPES.h"
#include "DIO.h"
#include "DIO_REGISTER.h"

u8 DIO_u8_SET_PIN(u8 Port , u8 Pin , u8 Direction)
{
     e28:	df 93       	push	r29
     e2a:	cf 93       	push	r28
     e2c:	00 d0       	rcall	.+0      	; 0xe2e <DIO_u8_SET_PIN+0x6>
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <DIO_u8_SET_PIN+0x8>
     e30:	00 d0       	rcall	.+0      	; 0xe32 <DIO_u8_SET_PIN+0xa>
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	8a 83       	std	Y+2, r24	; 0x02
     e38:	6b 83       	std	Y+3, r22	; 0x03
     e3a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_error_state ;

	if ((Port >= PORTA && Port <= PORTD) && (Pin >= PIN0 && Pin <= PIN7) && (Direction == INPUT || Direction == OUTPUT))
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	84 30       	cpi	r24, 0x04	; 4
     e40:	08 f0       	brcs	.+2      	; 0xe44 <DIO_u8_SET_PIN+0x1c>
     e42:	ee c0       	rjmp	.+476    	; 0x1020 <DIO_u8_SET_PIN+0x1f8>
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	88 30       	cpi	r24, 0x08	; 8
     e48:	08 f0       	brcs	.+2      	; 0xe4c <DIO_u8_SET_PIN+0x24>
     e4a:	ea c0       	rjmp	.+468    	; 0x1020 <DIO_u8_SET_PIN+0x1f8>
     e4c:	8c 81       	ldd	r24, Y+4	; 0x04
     e4e:	88 23       	and	r24, r24
     e50:	21 f0       	breq	.+8      	; 0xe5a <DIO_u8_SET_PIN+0x32>
     e52:	8c 81       	ldd	r24, Y+4	; 0x04
     e54:	81 30       	cpi	r24, 0x01	; 1
     e56:	09 f0       	breq	.+2      	; 0xe5a <DIO_u8_SET_PIN+0x32>
     e58:	e3 c0       	rjmp	.+454    	; 0x1020 <DIO_u8_SET_PIN+0x1f8>
	{
		Local_u8_error_state = OK;
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	89 83       	std	Y+1, r24	; 0x01
		switch(Port){
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	3e 83       	std	Y+6, r19	; 0x06
     e66:	2d 83       	std	Y+5, r18	; 0x05
     e68:	8d 81       	ldd	r24, Y+5	; 0x05
     e6a:	9e 81       	ldd	r25, Y+6	; 0x06
     e6c:	81 30       	cpi	r24, 0x01	; 1
     e6e:	91 05       	cpc	r25, r1
     e70:	09 f4       	brne	.+2      	; 0xe74 <DIO_u8_SET_PIN+0x4c>
     e72:	47 c0       	rjmp	.+142    	; 0xf02 <DIO_u8_SET_PIN+0xda>
     e74:	2d 81       	ldd	r18, Y+5	; 0x05
     e76:	3e 81       	ldd	r19, Y+6	; 0x06
     e78:	22 30       	cpi	r18, 0x02	; 2
     e7a:	31 05       	cpc	r19, r1
     e7c:	2c f4       	brge	.+10     	; 0xe88 <DIO_u8_SET_PIN+0x60>
     e7e:	8d 81       	ldd	r24, Y+5	; 0x05
     e80:	9e 81       	ldd	r25, Y+6	; 0x06
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	71 f0       	breq	.+28     	; 0xea2 <DIO_u8_SET_PIN+0x7a>
     e86:	cd c0       	rjmp	.+410    	; 0x1022 <DIO_u8_SET_PIN+0x1fa>
     e88:	2d 81       	ldd	r18, Y+5	; 0x05
     e8a:	3e 81       	ldd	r19, Y+6	; 0x06
     e8c:	22 30       	cpi	r18, 0x02	; 2
     e8e:	31 05       	cpc	r19, r1
     e90:	09 f4       	brne	.+2      	; 0xe94 <DIO_u8_SET_PIN+0x6c>
     e92:	67 c0       	rjmp	.+206    	; 0xf62 <DIO_u8_SET_PIN+0x13a>
     e94:	8d 81       	ldd	r24, Y+5	; 0x05
     e96:	9e 81       	ldd	r25, Y+6	; 0x06
     e98:	83 30       	cpi	r24, 0x03	; 3
     e9a:	91 05       	cpc	r25, r1
     e9c:	09 f4       	brne	.+2      	; 0xea0 <DIO_u8_SET_PIN+0x78>
     e9e:	91 c0       	rjmp	.+290    	; 0xfc2 <DIO_u8_SET_PIN+0x19a>
     ea0:	c0 c0       	rjmp	.+384    	; 0x1022 <DIO_u8_SET_PIN+0x1fa>
		case PORTA:
			if(Direction == INPUT)
     ea2:	8c 81       	ldd	r24, Y+4	; 0x04
     ea4:	88 23       	and	r24, r24
     ea6:	a9 f4       	brne	.+42     	; 0xed2 <DIO_u8_SET_PIN+0xaa>
				CLEAR_BIT(DDRA_REGISTER, Pin);
     ea8:	aa e3       	ldi	r26, 0x3A	; 58
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	ea e3       	ldi	r30, 0x3A	; 58
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8b 81       	ldd	r24, Y+3	; 0x03
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <DIO_u8_SET_PIN+0x9e>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <DIO_u8_SET_PIN+0x9a>
     eca:	80 95       	com	r24
     ecc:	84 23       	and	r24, r20
     ece:	8c 93       	st	X, r24
     ed0:	a8 c0       	rjmp	.+336    	; 0x1022 <DIO_u8_SET_PIN+0x1fa>
			else if(Direction == OUTPUT)
     ed2:	8c 81       	ldd	r24, Y+4	; 0x04
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	09 f0       	breq	.+2      	; 0xeda <DIO_u8_SET_PIN+0xb2>
     ed8:	a4 c0       	rjmp	.+328    	; 0x1022 <DIO_u8_SET_PIN+0x1fa>
				SET_BIT(DDRA_REGISTER, Pin);
     eda:	aa e3       	ldi	r26, 0x3A	; 58
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	ea e3       	ldi	r30, 0x3A	; 58
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	48 2f       	mov	r20, r24
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	02 2e       	mov	r0, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <DIO_u8_SET_PIN+0xd0>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	0a 94       	dec	r0
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <DIO_u8_SET_PIN+0xcc>
     efc:	84 2b       	or	r24, r20
     efe:	8c 93       	st	X, r24
     f00:	90 c0       	rjmp	.+288    	; 0x1022 <DIO_u8_SET_PIN+0x1fa>
			break;

		case PORTB:
			if(Direction == INPUT)
     f02:	8c 81       	ldd	r24, Y+4	; 0x04
     f04:	88 23       	and	r24, r24
     f06:	a9 f4       	brne	.+42     	; 0xf32 <DIO_u8_SET_PIN+0x10a>
				CLEAR_BIT(DDRB_REGISTER, Pin);
     f08:	a7 e3       	ldi	r26, 0x37	; 55
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e7 e3       	ldi	r30, 0x37	; 55
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	48 2f       	mov	r20, r24
     f14:	8b 81       	ldd	r24, Y+3	; 0x03
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	02 2e       	mov	r0, r18
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <DIO_u8_SET_PIN+0xfe>
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	0a 94       	dec	r0
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <DIO_u8_SET_PIN+0xfa>
     f2a:	80 95       	com	r24
     f2c:	84 23       	and	r24, r20
     f2e:	8c 93       	st	X, r24
     f30:	78 c0       	rjmp	.+240    	; 0x1022 <DIO_u8_SET_PIN+0x1fa>
			else if(Direction == OUTPUT)
     f32:	8c 81       	ldd	r24, Y+4	; 0x04
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	09 f0       	breq	.+2      	; 0xf3a <DIO_u8_SET_PIN+0x112>
     f38:	74 c0       	rjmp	.+232    	; 0x1022 <DIO_u8_SET_PIN+0x1fa>
				SET_BIT(DDRB_REGISTER, Pin);
     f3a:	a7 e3       	ldi	r26, 0x37	; 55
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e7 e3       	ldi	r30, 0x37	; 55
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 2e       	mov	r0, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <DIO_u8_SET_PIN+0x130>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <DIO_u8_SET_PIN+0x12c>
     f5c:	84 2b       	or	r24, r20
     f5e:	8c 93       	st	X, r24
     f60:	60 c0       	rjmp	.+192    	; 0x1022 <DIO_u8_SET_PIN+0x1fa>
			break;

		case PORTC:
			if(Direction == INPUT)
     f62:	8c 81       	ldd	r24, Y+4	; 0x04
     f64:	88 23       	and	r24, r24
     f66:	a9 f4       	brne	.+42     	; 0xf92 <DIO_u8_SET_PIN+0x16a>
				CLEAR_BIT(DDRC_REGISTER, Pin);
     f68:	a4 e3       	ldi	r26, 0x34	; 52
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e4 e3       	ldi	r30, 0x34	; 52
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	48 2f       	mov	r20, r24
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 2e       	mov	r0, r18
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <DIO_u8_SET_PIN+0x15e>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	0a 94       	dec	r0
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <DIO_u8_SET_PIN+0x15a>
     f8a:	80 95       	com	r24
     f8c:	84 23       	and	r24, r20
     f8e:	8c 93       	st	X, r24
     f90:	48 c0       	rjmp	.+144    	; 0x1022 <DIO_u8_SET_PIN+0x1fa>
			else if(Direction == OUTPUT)
     f92:	8c 81       	ldd	r24, Y+4	; 0x04
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	09 f0       	breq	.+2      	; 0xf9a <DIO_u8_SET_PIN+0x172>
     f98:	44 c0       	rjmp	.+136    	; 0x1022 <DIO_u8_SET_PIN+0x1fa>
				SET_BIT(DDRC_REGISTER, Pin);
     f9a:	a4 e3       	ldi	r26, 0x34	; 52
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e4 e3       	ldi	r30, 0x34	; 52
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 2e       	mov	r0, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <DIO_u8_SET_PIN+0x190>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	0a 94       	dec	r0
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <DIO_u8_SET_PIN+0x18c>
     fbc:	84 2b       	or	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	30 c0       	rjmp	.+96     	; 0x1022 <DIO_u8_SET_PIN+0x1fa>
			break;

		case PORTD:
			if(Direction == INPUT)
     fc2:	8c 81       	ldd	r24, Y+4	; 0x04
     fc4:	88 23       	and	r24, r24
     fc6:	a9 f4       	brne	.+42     	; 0xff2 <DIO_u8_SET_PIN+0x1ca>
				CLEAR_BIT(DDRD_REGISTER, Pin);
     fc8:	a1 e3       	ldi	r26, 0x31	; 49
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e1 e3       	ldi	r30, 0x31	; 49
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <DIO_u8_SET_PIN+0x1be>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <DIO_u8_SET_PIN+0x1ba>
     fea:	80 95       	com	r24
     fec:	84 23       	and	r24, r20
     fee:	8c 93       	st	X, r24
     ff0:	18 c0       	rjmp	.+48     	; 0x1022 <DIO_u8_SET_PIN+0x1fa>
			else if(Direction == OUTPUT)
     ff2:	8c 81       	ldd	r24, Y+4	; 0x04
     ff4:	81 30       	cpi	r24, 0x01	; 1
     ff6:	a9 f4       	brne	.+42     	; 0x1022 <DIO_u8_SET_PIN+0x1fa>
				SET_BIT(DDRD_REGISTER, Pin);
     ff8:	a1 e3       	ldi	r26, 0x31	; 49
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e1 e3       	ldi	r30, 0x31	; 49
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <DIO_u8_SET_PIN+0x1ee>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <DIO_u8_SET_PIN+0x1ea>
    101a:	84 2b       	or	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	01 c0       	rjmp	.+2      	; 0x1022 <DIO_u8_SET_PIN+0x1fa>
			break;
		}
	}
	else{
		Local_u8_error_state = ERR;
    1020:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8_error_state;
    1022:	89 81       	ldd	r24, Y+1	; 0x01
}
    1024:	26 96       	adiw	r28, 0x06	; 6
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	de bf       	out	0x3e, r29	; 62
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	cd bf       	out	0x3d, r28	; 61
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <DIO_u8_SET_PORT>:
u8 DIO_u8_SET_PORT(u8 Port , u8 Direction)
{
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	00 d0       	rcall	.+0      	; 0x103c <DIO_u8_SET_PORT+0x6>
    103c:	00 d0       	rcall	.+0      	; 0x103e <DIO_u8_SET_PORT+0x8>
    103e:	0f 92       	push	r0
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	8a 83       	std	Y+2, r24	; 0x02
    1046:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_error_state = OK;
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	89 83       	std	Y+1, r24	; 0x01
	if(Port > PORTD || Port < PORTA){
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	84 30       	cpi	r24, 0x04	; 4
    1050:	10 f0       	brcs	.+4      	; 0x1056 <DIO_u8_SET_PORT+0x20>
		Local_u8_error_state = ERR;
    1052:	19 82       	std	Y+1, r1	; 0x01
    1054:	32 c0       	rjmp	.+100    	; 0x10ba <DIO_u8_SET_PORT+0x84>
	}else{
		switch(Port)
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	3d 83       	std	Y+5, r19	; 0x05
    105e:	2c 83       	std	Y+4, r18	; 0x04
    1060:	8c 81       	ldd	r24, Y+4	; 0x04
    1062:	9d 81       	ldd	r25, Y+5	; 0x05
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	91 05       	cpc	r25, r1
    1068:	d1 f0       	breq	.+52     	; 0x109e <DIO_u8_SET_PORT+0x68>
    106a:	2c 81       	ldd	r18, Y+4	; 0x04
    106c:	3d 81       	ldd	r19, Y+5	; 0x05
    106e:	22 30       	cpi	r18, 0x02	; 2
    1070:	31 05       	cpc	r19, r1
    1072:	2c f4       	brge	.+10     	; 0x107e <DIO_u8_SET_PORT+0x48>
    1074:	8c 81       	ldd	r24, Y+4	; 0x04
    1076:	9d 81       	ldd	r25, Y+5	; 0x05
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	61 f0       	breq	.+24     	; 0x1094 <DIO_u8_SET_PORT+0x5e>
    107c:	1e c0       	rjmp	.+60     	; 0x10ba <DIO_u8_SET_PORT+0x84>
    107e:	2c 81       	ldd	r18, Y+4	; 0x04
    1080:	3d 81       	ldd	r19, Y+5	; 0x05
    1082:	22 30       	cpi	r18, 0x02	; 2
    1084:	31 05       	cpc	r19, r1
    1086:	81 f0       	breq	.+32     	; 0x10a8 <DIO_u8_SET_PORT+0x72>
    1088:	8c 81       	ldd	r24, Y+4	; 0x04
    108a:	9d 81       	ldd	r25, Y+5	; 0x05
    108c:	83 30       	cpi	r24, 0x03	; 3
    108e:	91 05       	cpc	r25, r1
    1090:	81 f0       	breq	.+32     	; 0x10b2 <DIO_u8_SET_PORT+0x7c>
    1092:	13 c0       	rjmp	.+38     	; 0x10ba <DIO_u8_SET_PORT+0x84>
		{
		case PORTA:
			DDRA_REGISTER= Direction;
    1094:	ea e3       	ldi	r30, 0x3A	; 58
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	80 83       	st	Z, r24
    109c:	0e c0       	rjmp	.+28     	; 0x10ba <DIO_u8_SET_PORT+0x84>
			break;
		case PORTB:
			DDRB_REGISTER= Direction;
    109e:	e7 e3       	ldi	r30, 0x37	; 55
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	80 83       	st	Z, r24
    10a6:	09 c0       	rjmp	.+18     	; 0x10ba <DIO_u8_SET_PORT+0x84>
			break;
		case PORTC:
			DDRC_REGISTER= Direction;
    10a8:	e4 e3       	ldi	r30, 0x34	; 52
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	80 83       	st	Z, r24
    10b0:	04 c0       	rjmp	.+8      	; 0x10ba <DIO_u8_SET_PORT+0x84>
			break;
		case PORTD:
			DDRD_REGISTER= Direction;
    10b2:	e1 e3       	ldi	r30, 0x31	; 49
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	80 83       	st	Z, r24
			break;
		}
	}
	return Local_u8_error_state;
    10ba:	89 81       	ldd	r24, Y+1	; 0x01

}
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <DIO_u8_WRITE_PIN>:

u8 DIO_u8_WRITE_PIN(u8 Port , u8 Pin , u8 Value)
{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <DIO_u8_WRITE_PIN+0x6>
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <DIO_u8_WRITE_PIN+0x8>
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <DIO_u8_WRITE_PIN+0xa>
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	8a 83       	std	Y+2, r24	; 0x02
    10dc:	6b 83       	std	Y+3, r22	; 0x03
    10de:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_error_state = OK;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	89 83       	std	Y+1, r24	; 0x01
	if(Port > PORTD || Port < PORTA || Pin > PIN7 || Pin < PIN0 || (Value != HIGH && Value != LOW)){
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	84 30       	cpi	r24, 0x04	; 4
    10e8:	48 f4       	brcc	.+18     	; 0x10fc <DIO_u8_WRITE_PIN+0x30>
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	88 30       	cpi	r24, 0x08	; 8
    10ee:	30 f4       	brcc	.+12     	; 0x10fc <DIO_u8_WRITE_PIN+0x30>
    10f0:	8c 81       	ldd	r24, Y+4	; 0x04
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	29 f0       	breq	.+10     	; 0x1100 <DIO_u8_WRITE_PIN+0x34>
    10f6:	8c 81       	ldd	r24, Y+4	; 0x04
    10f8:	88 23       	and	r24, r24
    10fa:	11 f0       	breq	.+4      	; 0x1100 <DIO_u8_WRITE_PIN+0x34>
		Local_u8_error_state = ERR;
    10fc:	19 82       	std	Y+1, r1	; 0x01
    10fe:	e0 c0       	rjmp	.+448    	; 0x12c0 <DIO_u8_WRITE_PIN+0x1f4>
	}
	else{

		switch(Port){
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	3e 83       	std	Y+6, r19	; 0x06
    1108:	2d 83       	std	Y+5, r18	; 0x05
    110a:	8d 81       	ldd	r24, Y+5	; 0x05
    110c:	9e 81       	ldd	r25, Y+6	; 0x06
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	91 05       	cpc	r25, r1
    1112:	09 f4       	brne	.+2      	; 0x1116 <DIO_u8_WRITE_PIN+0x4a>
    1114:	47 c0       	rjmp	.+142    	; 0x11a4 <DIO_u8_WRITE_PIN+0xd8>
    1116:	2d 81       	ldd	r18, Y+5	; 0x05
    1118:	3e 81       	ldd	r19, Y+6	; 0x06
    111a:	22 30       	cpi	r18, 0x02	; 2
    111c:	31 05       	cpc	r19, r1
    111e:	2c f4       	brge	.+10     	; 0x112a <DIO_u8_WRITE_PIN+0x5e>
    1120:	8d 81       	ldd	r24, Y+5	; 0x05
    1122:	9e 81       	ldd	r25, Y+6	; 0x06
    1124:	00 97       	sbiw	r24, 0x00	; 0
    1126:	71 f0       	breq	.+28     	; 0x1144 <DIO_u8_WRITE_PIN+0x78>
    1128:	cb c0       	rjmp	.+406    	; 0x12c0 <DIO_u8_WRITE_PIN+0x1f4>
    112a:	2d 81       	ldd	r18, Y+5	; 0x05
    112c:	3e 81       	ldd	r19, Y+6	; 0x06
    112e:	22 30       	cpi	r18, 0x02	; 2
    1130:	31 05       	cpc	r19, r1
    1132:	09 f4       	brne	.+2      	; 0x1136 <DIO_u8_WRITE_PIN+0x6a>
    1134:	67 c0       	rjmp	.+206    	; 0x1204 <DIO_u8_WRITE_PIN+0x138>
    1136:	8d 81       	ldd	r24, Y+5	; 0x05
    1138:	9e 81       	ldd	r25, Y+6	; 0x06
    113a:	83 30       	cpi	r24, 0x03	; 3
    113c:	91 05       	cpc	r25, r1
    113e:	09 f4       	brne	.+2      	; 0x1142 <DIO_u8_WRITE_PIN+0x76>
    1140:	91 c0       	rjmp	.+290    	; 0x1264 <DIO_u8_WRITE_PIN+0x198>
    1142:	be c0       	rjmp	.+380    	; 0x12c0 <DIO_u8_WRITE_PIN+0x1f4>
		case PORTA:
			if(Value == LOW)
    1144:	8c 81       	ldd	r24, Y+4	; 0x04
    1146:	88 23       	and	r24, r24
    1148:	a9 f4       	brne	.+42     	; 0x1174 <DIO_u8_WRITE_PIN+0xa8>
				CLEAR_BIT(PORTA_REGISTER, Pin);
    114a:	ab e3       	ldi	r26, 0x3B	; 59
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	eb e3       	ldi	r30, 0x3B	; 59
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	48 2f       	mov	r20, r24
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 2e       	mov	r0, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <DIO_u8_WRITE_PIN+0x9c>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	0a 94       	dec	r0
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <DIO_u8_WRITE_PIN+0x98>
    116c:	80 95       	com	r24
    116e:	84 23       	and	r24, r20
    1170:	8c 93       	st	X, r24
    1172:	a6 c0       	rjmp	.+332    	; 0x12c0 <DIO_u8_WRITE_PIN+0x1f4>
			else if(Value == HIGH)
    1174:	8c 81       	ldd	r24, Y+4	; 0x04
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	09 f0       	breq	.+2      	; 0x117c <DIO_u8_WRITE_PIN+0xb0>
    117a:	a2 c0       	rjmp	.+324    	; 0x12c0 <DIO_u8_WRITE_PIN+0x1f4>
				SET_BIT(PORTA_REGISTER, Pin);
    117c:	ab e3       	ldi	r26, 0x3B	; 59
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	eb e3       	ldi	r30, 0x3B	; 59
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	48 2f       	mov	r20, r24
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	02 2e       	mov	r0, r18
    1194:	02 c0       	rjmp	.+4      	; 0x119a <DIO_u8_WRITE_PIN+0xce>
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	0a 94       	dec	r0
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <DIO_u8_WRITE_PIN+0xca>
    119e:	84 2b       	or	r24, r20
    11a0:	8c 93       	st	X, r24
    11a2:	8e c0       	rjmp	.+284    	; 0x12c0 <DIO_u8_WRITE_PIN+0x1f4>
			break;

		case PORTB:
			if(Value == LOW)
    11a4:	8c 81       	ldd	r24, Y+4	; 0x04
    11a6:	88 23       	and	r24, r24
    11a8:	a9 f4       	brne	.+42     	; 0x11d4 <DIO_u8_WRITE_PIN+0x108>
				CLEAR_BIT(PORTB_REGISTER, Pin);
    11aa:	a8 e3       	ldi	r26, 0x38	; 56
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e8 e3       	ldi	r30, 0x38	; 56
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 2e       	mov	r0, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <DIO_u8_WRITE_PIN+0xfc>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	0a 94       	dec	r0
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <DIO_u8_WRITE_PIN+0xf8>
    11cc:	80 95       	com	r24
    11ce:	84 23       	and	r24, r20
    11d0:	8c 93       	st	X, r24
    11d2:	76 c0       	rjmp	.+236    	; 0x12c0 <DIO_u8_WRITE_PIN+0x1f4>
			else if(Value == HIGH)
    11d4:	8c 81       	ldd	r24, Y+4	; 0x04
    11d6:	81 30       	cpi	r24, 0x01	; 1
    11d8:	09 f0       	breq	.+2      	; 0x11dc <DIO_u8_WRITE_PIN+0x110>
    11da:	72 c0       	rjmp	.+228    	; 0x12c0 <DIO_u8_WRITE_PIN+0x1f4>
				SET_BIT(PORTB_REGISTER, Pin);
    11dc:	a8 e3       	ldi	r26, 0x38	; 56
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e8 e3       	ldi	r30, 0x38	; 56
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	48 2f       	mov	r20, r24
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 2e       	mov	r0, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <DIO_u8_WRITE_PIN+0x12e>
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	0a 94       	dec	r0
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <DIO_u8_WRITE_PIN+0x12a>
    11fe:	84 2b       	or	r24, r20
    1200:	8c 93       	st	X, r24
    1202:	5e c0       	rjmp	.+188    	; 0x12c0 <DIO_u8_WRITE_PIN+0x1f4>
			break;

		case PORTC:
			if(Value == LOW)
    1204:	8c 81       	ldd	r24, Y+4	; 0x04
    1206:	88 23       	and	r24, r24
    1208:	a9 f4       	brne	.+42     	; 0x1234 <DIO_u8_WRITE_PIN+0x168>
				CLEAR_BIT(PORTC_REGISTER, Pin);
    120a:	a5 e3       	ldi	r26, 0x35	; 53
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e5 e3       	ldi	r30, 0x35	; 53
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_u8_WRITE_PIN+0x15c>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_u8_WRITE_PIN+0x158>
    122c:	80 95       	com	r24
    122e:	84 23       	and	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	46 c0       	rjmp	.+140    	; 0x12c0 <DIO_u8_WRITE_PIN+0x1f4>
			else if(Value == HIGH)
    1234:	8c 81       	ldd	r24, Y+4	; 0x04
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	09 f0       	breq	.+2      	; 0x123c <DIO_u8_WRITE_PIN+0x170>
    123a:	42 c0       	rjmp	.+132    	; 0x12c0 <DIO_u8_WRITE_PIN+0x1f4>
				SET_BIT(PORTC_REGISTER, Pin);
    123c:	a5 e3       	ldi	r26, 0x35	; 53
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e5 e3       	ldi	r30, 0x35	; 53
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 2e       	mov	r0, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <DIO_u8_WRITE_PIN+0x18e>
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	0a 94       	dec	r0
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <DIO_u8_WRITE_PIN+0x18a>
    125e:	84 2b       	or	r24, r20
    1260:	8c 93       	st	X, r24
    1262:	2e c0       	rjmp	.+92     	; 0x12c0 <DIO_u8_WRITE_PIN+0x1f4>
			break;

		case PORTD:
			if(Value == LOW)
    1264:	8c 81       	ldd	r24, Y+4	; 0x04
    1266:	88 23       	and	r24, r24
    1268:	a9 f4       	brne	.+42     	; 0x1294 <DIO_u8_WRITE_PIN+0x1c8>
				CLEAR_BIT(PORTD_REGISTER, Pin);
    126a:	a2 e3       	ldi	r26, 0x32	; 50
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e2 e3       	ldi	r30, 0x32	; 50
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 2e       	mov	r0, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <DIO_u8_WRITE_PIN+0x1bc>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <DIO_u8_WRITE_PIN+0x1b8>
    128c:	80 95       	com	r24
    128e:	84 23       	and	r24, r20
    1290:	8c 93       	st	X, r24
    1292:	16 c0       	rjmp	.+44     	; 0x12c0 <DIO_u8_WRITE_PIN+0x1f4>
			else if(Value == HIGH)
    1294:	8c 81       	ldd	r24, Y+4	; 0x04
    1296:	81 30       	cpi	r24, 0x01	; 1
    1298:	99 f4       	brne	.+38     	; 0x12c0 <DIO_u8_WRITE_PIN+0x1f4>
				SET_BIT(PORTD_REGISTER, Pin);
    129a:	a2 e3       	ldi	r26, 0x32	; 50
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	e2 e3       	ldi	r30, 0x32	; 50
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	48 2f       	mov	r20, r24
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	02 2e       	mov	r0, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <DIO_u8_WRITE_PIN+0x1ec>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	0a 94       	dec	r0
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <DIO_u8_WRITE_PIN+0x1e8>
    12bc:	84 2b       	or	r24, r20
    12be:	8c 93       	st	X, r24
			break;
		}
	}

	return Local_u8_error_state;
    12c0:	89 81       	ldd	r24, Y+1	; 0x01

}
    12c2:	26 96       	adiw	r28, 0x06	; 6
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	cd bf       	out	0x3d, r28	; 61
    12ce:	cf 91       	pop	r28
    12d0:	df 91       	pop	r29
    12d2:	08 95       	ret

000012d4 <DIO_u8_WRITE_PORT>:
u8 DIO_u8_WRITE_PORT(u8 Port , u8 Value)
{
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	00 d0       	rcall	.+0      	; 0x12da <DIO_u8_WRITE_PORT+0x6>
    12da:	00 d0       	rcall	.+0      	; 0x12dc <DIO_u8_WRITE_PORT+0x8>
    12dc:	0f 92       	push	r0
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	8a 83       	std	Y+2, r24	; 0x02
    12e4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_error_state = OK;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	89 83       	std	Y+1, r24	; 0x01
	if(Port > PORTD || Port < PORTA)
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	84 30       	cpi	r24, 0x04	; 4
    12ee:	10 f0       	brcs	.+4      	; 0x12f4 <DIO_u8_WRITE_PORT+0x20>
	{
		Local_u8_error_state = ERR;
    12f0:	19 82       	std	Y+1, r1	; 0x01
    12f2:	32 c0       	rjmp	.+100    	; 0x1358 <DIO_u8_WRITE_PORT+0x84>
	}else{
		switch(Port){
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	3d 83       	std	Y+5, r19	; 0x05
    12fc:	2c 83       	std	Y+4, r18	; 0x04
    12fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1300:	9d 81       	ldd	r25, Y+5	; 0x05
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	91 05       	cpc	r25, r1
    1306:	d1 f0       	breq	.+52     	; 0x133c <DIO_u8_WRITE_PORT+0x68>
    1308:	2c 81       	ldd	r18, Y+4	; 0x04
    130a:	3d 81       	ldd	r19, Y+5	; 0x05
    130c:	22 30       	cpi	r18, 0x02	; 2
    130e:	31 05       	cpc	r19, r1
    1310:	2c f4       	brge	.+10     	; 0x131c <DIO_u8_WRITE_PORT+0x48>
    1312:	8c 81       	ldd	r24, Y+4	; 0x04
    1314:	9d 81       	ldd	r25, Y+5	; 0x05
    1316:	00 97       	sbiw	r24, 0x00	; 0
    1318:	61 f0       	breq	.+24     	; 0x1332 <DIO_u8_WRITE_PORT+0x5e>
    131a:	1e c0       	rjmp	.+60     	; 0x1358 <DIO_u8_WRITE_PORT+0x84>
    131c:	2c 81       	ldd	r18, Y+4	; 0x04
    131e:	3d 81       	ldd	r19, Y+5	; 0x05
    1320:	22 30       	cpi	r18, 0x02	; 2
    1322:	31 05       	cpc	r19, r1
    1324:	81 f0       	breq	.+32     	; 0x1346 <DIO_u8_WRITE_PORT+0x72>
    1326:	8c 81       	ldd	r24, Y+4	; 0x04
    1328:	9d 81       	ldd	r25, Y+5	; 0x05
    132a:	83 30       	cpi	r24, 0x03	; 3
    132c:	91 05       	cpc	r25, r1
    132e:	81 f0       	breq	.+32     	; 0x1350 <DIO_u8_WRITE_PORT+0x7c>
    1330:	13 c0       	rjmp	.+38     	; 0x1358 <DIO_u8_WRITE_PORT+0x84>
		case PORTA:
			PORTA_REGISTER=Value;
    1332:	eb e3       	ldi	r30, 0x3B	; 59
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	80 83       	st	Z, r24
    133a:	0e c0       	rjmp	.+28     	; 0x1358 <DIO_u8_WRITE_PORT+0x84>
			break;
		case PORTB:
			PORTB_REGISTER=Value;
    133c:	e8 e3       	ldi	r30, 0x38	; 56
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	80 83       	st	Z, r24
    1344:	09 c0       	rjmp	.+18     	; 0x1358 <DIO_u8_WRITE_PORT+0x84>
			break;
		case PORTC:
			PORTC_REGISTER=Value;
    1346:	e5 e3       	ldi	r30, 0x35	; 53
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	80 83       	st	Z, r24
    134e:	04 c0       	rjmp	.+8      	; 0x1358 <DIO_u8_WRITE_PORT+0x84>
			break;
		case PORTD:
			PORTD_REGISTER=Value;
    1350:	e2 e3       	ldi	r30, 0x32	; 50
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	80 83       	st	Z, r24
			break;
		}
	}
	return Local_u8_error_state;
    1358:	89 81       	ldd	r24, Y+1	; 0x01
}
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	08 95       	ret

0000136a <DIO_u8_READ_PORT>:

u8 DIO_u8_READ_PORT(u8 Port )
{
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	00 d0       	rcall	.+0      	; 0x1370 <DIO_u8_READ_PORT+0x6>
    1370:	00 d0       	rcall	.+0      	; 0x1372 <DIO_u8_READ_PORT+0x8>
    1372:	00 d0       	rcall	.+0      	; 0x1374 <DIO_u8_READ_PORT+0xa>
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	8b 83       	std	Y+3, r24	; 0x03
	if (Port >= PORTA && Port <= PORTD){
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	84 30       	cpi	r24, 0x04	; 4
    137e:	a8 f5       	brcc	.+106    	; 0x13ea <DIO_u8_READ_PORT+0x80>
		u8 Value;
		switch(Port){
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	3e 83       	std	Y+6, r19	; 0x06
    1388:	2d 83       	std	Y+5, r18	; 0x05
    138a:	8d 81       	ldd	r24, Y+5	; 0x05
    138c:	9e 81       	ldd	r25, Y+6	; 0x06
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	91 05       	cpc	r25, r1
    1392:	d1 f0       	breq	.+52     	; 0x13c8 <DIO_u8_READ_PORT+0x5e>
    1394:	2d 81       	ldd	r18, Y+5	; 0x05
    1396:	3e 81       	ldd	r19, Y+6	; 0x06
    1398:	22 30       	cpi	r18, 0x02	; 2
    139a:	31 05       	cpc	r19, r1
    139c:	2c f4       	brge	.+10     	; 0x13a8 <DIO_u8_READ_PORT+0x3e>
    139e:	8d 81       	ldd	r24, Y+5	; 0x05
    13a0:	9e 81       	ldd	r25, Y+6	; 0x06
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	61 f0       	breq	.+24     	; 0x13be <DIO_u8_READ_PORT+0x54>
    13a6:	1e c0       	rjmp	.+60     	; 0x13e4 <DIO_u8_READ_PORT+0x7a>
    13a8:	2d 81       	ldd	r18, Y+5	; 0x05
    13aa:	3e 81       	ldd	r19, Y+6	; 0x06
    13ac:	22 30       	cpi	r18, 0x02	; 2
    13ae:	31 05       	cpc	r19, r1
    13b0:	81 f0       	breq	.+32     	; 0x13d2 <DIO_u8_READ_PORT+0x68>
    13b2:	8d 81       	ldd	r24, Y+5	; 0x05
    13b4:	9e 81       	ldd	r25, Y+6	; 0x06
    13b6:	83 30       	cpi	r24, 0x03	; 3
    13b8:	91 05       	cpc	r25, r1
    13ba:	81 f0       	breq	.+32     	; 0x13dc <DIO_u8_READ_PORT+0x72>
    13bc:	13 c0       	rjmp	.+38     	; 0x13e4 <DIO_u8_READ_PORT+0x7a>
		case PORTA:
			Value = PINA_REGISTER;
    13be:	e9 e3       	ldi	r30, 0x39	; 57
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	8a 83       	std	Y+2, r24	; 0x02
    13c6:	0e c0       	rjmp	.+28     	; 0x13e4 <DIO_u8_READ_PORT+0x7a>
			break;

		case PORTB:
			Value = PINB_REGISTER;
    13c8:	e6 e3       	ldi	r30, 0x36	; 54
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	8a 83       	std	Y+2, r24	; 0x02
    13d0:	09 c0       	rjmp	.+18     	; 0x13e4 <DIO_u8_READ_PORT+0x7a>
			break;

		case PORTC:
			Value = PINC_REGISTER;
    13d2:	e3 e3       	ldi	r30, 0x33	; 51
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	8a 83       	std	Y+2, r24	; 0x02
    13da:	04 c0       	rjmp	.+8      	; 0x13e4 <DIO_u8_READ_PORT+0x7a>
			break;

		case PORTD:
			Value = PIND_REGISTER;
    13dc:	e0 e3       	ldi	r30, 0x30	; 48
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	8a 83       	std	Y+2, r24	; 0x02
			break;
		}
		return Value;
    13e4:	9a 81       	ldd	r25, Y+2	; 0x02
    13e6:	9c 83       	std	Y+4, r25	; 0x04
    13e8:	03 c0       	rjmp	.+6      	; 0x13f0 <DIO_u8_READ_PORT+0x86>
	}else{
		u8 Local_u8_error_state=ERR;
    13ea:	19 82       	std	Y+1, r1	; 0x01
		return Local_u8_error_state;
    13ec:	29 81       	ldd	r18, Y+1	; 0x01
    13ee:	2c 83       	std	Y+4, r18	; 0x04
    13f0:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    13f2:	26 96       	adiw	r28, 0x06	; 6
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	cd bf       	out	0x3d, r28	; 61
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	08 95       	ret

00001404 <DIO_u8_READ_PIN>:
u8 DIO_u8_READ_PIN(u8 Port , u8 Pin)
{
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	27 97       	sbiw	r28, 0x07	; 7
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	f8 94       	cli
    1412:	de bf       	out	0x3e, r29	; 62
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	cd bf       	out	0x3d, r28	; 61
    1418:	8b 83       	std	Y+3, r24	; 0x03
    141a:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8_error_state =OK;
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	8a 83       	std	Y+2, r24	; 0x02

	if ((Port >= PORTA && Port <= PORTD) && (Pin >= PIN0 && Pin <= PIN7))
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	84 30       	cpi	r24, 0x04	; 4
    1424:	08 f0       	brcs	.+2      	; 0x1428 <DIO_u8_READ_PIN+0x24>
    1426:	70 c0       	rjmp	.+224    	; 0x1508 <DIO_u8_READ_PIN+0x104>
    1428:	8c 81       	ldd	r24, Y+4	; 0x04
    142a:	88 30       	cpi	r24, 0x08	; 8
    142c:	08 f0       	brcs	.+2      	; 0x1430 <DIO_u8_READ_PIN+0x2c>
    142e:	6c c0       	rjmp	.+216    	; 0x1508 <DIO_u8_READ_PIN+0x104>
	{
		Local_u8_error_state = OK;
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	8a 83       	std	Y+2, r24	; 0x02
		u8 Value;
		switch(Port){
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	3f 83       	std	Y+7, r19	; 0x07
    143c:	2e 83       	std	Y+6, r18	; 0x06
    143e:	4e 81       	ldd	r20, Y+6	; 0x06
    1440:	5f 81       	ldd	r21, Y+7	; 0x07
    1442:	41 30       	cpi	r20, 0x01	; 1
    1444:	51 05       	cpc	r21, r1
    1446:	41 f1       	breq	.+80     	; 0x1498 <DIO_u8_READ_PIN+0x94>
    1448:	8e 81       	ldd	r24, Y+6	; 0x06
    144a:	9f 81       	ldd	r25, Y+7	; 0x07
    144c:	82 30       	cpi	r24, 0x02	; 2
    144e:	91 05       	cpc	r25, r1
    1450:	34 f4       	brge	.+12     	; 0x145e <DIO_u8_READ_PIN+0x5a>
    1452:	2e 81       	ldd	r18, Y+6	; 0x06
    1454:	3f 81       	ldd	r19, Y+7	; 0x07
    1456:	21 15       	cp	r18, r1
    1458:	31 05       	cpc	r19, r1
    145a:	61 f0       	breq	.+24     	; 0x1474 <DIO_u8_READ_PIN+0x70>
    145c:	52 c0       	rjmp	.+164    	; 0x1502 <DIO_u8_READ_PIN+0xfe>
    145e:	4e 81       	ldd	r20, Y+6	; 0x06
    1460:	5f 81       	ldd	r21, Y+7	; 0x07
    1462:	42 30       	cpi	r20, 0x02	; 2
    1464:	51 05       	cpc	r21, r1
    1466:	51 f1       	breq	.+84     	; 0x14bc <DIO_u8_READ_PIN+0xb8>
    1468:	8e 81       	ldd	r24, Y+6	; 0x06
    146a:	9f 81       	ldd	r25, Y+7	; 0x07
    146c:	83 30       	cpi	r24, 0x03	; 3
    146e:	91 05       	cpc	r25, r1
    1470:	b9 f1       	breq	.+110    	; 0x14e0 <DIO_u8_READ_PIN+0xdc>
    1472:	47 c0       	rjmp	.+142    	; 0x1502 <DIO_u8_READ_PIN+0xfe>
		case PORTA:
			Value= GET_BIT(PINA_REGISTER,Pin);
    1474:	e9 e3       	ldi	r30, 0x39	; 57
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	8c 81       	ldd	r24, Y+4	; 0x04
    1480:	88 2f       	mov	r24, r24
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	a9 01       	movw	r20, r18
    1486:	02 c0       	rjmp	.+4      	; 0x148c <DIO_u8_READ_PIN+0x88>
    1488:	55 95       	asr	r21
    148a:	47 95       	ror	r20
    148c:	8a 95       	dec	r24
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <DIO_u8_READ_PIN+0x84>
    1490:	ca 01       	movw	r24, r20
    1492:	81 70       	andi	r24, 0x01	; 1
    1494:	89 83       	std	Y+1, r24	; 0x01
    1496:	35 c0       	rjmp	.+106    	; 0x1502 <DIO_u8_READ_PIN+0xfe>
			break;

		case PORTB:
			Value= GET_BIT(PINB_REGISTER,Pin);
    1498:	e6 e3       	ldi	r30, 0x36	; 54
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	8c 81       	ldd	r24, Y+4	; 0x04
    14a4:	88 2f       	mov	r24, r24
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	a9 01       	movw	r20, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <DIO_u8_READ_PIN+0xac>
    14ac:	55 95       	asr	r21
    14ae:	47 95       	ror	r20
    14b0:	8a 95       	dec	r24
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <DIO_u8_READ_PIN+0xa8>
    14b4:	ca 01       	movw	r24, r20
    14b6:	81 70       	andi	r24, 0x01	; 1
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	23 c0       	rjmp	.+70     	; 0x1502 <DIO_u8_READ_PIN+0xfe>
			break;

		case PORTC:
			Value= GET_BIT(PINC_REGISTER,Pin);
    14bc:	e3 e3       	ldi	r30, 0x33	; 51
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	8c 81       	ldd	r24, Y+4	; 0x04
    14c8:	88 2f       	mov	r24, r24
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	a9 01       	movw	r20, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <DIO_u8_READ_PIN+0xd0>
    14d0:	55 95       	asr	r21
    14d2:	47 95       	ror	r20
    14d4:	8a 95       	dec	r24
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <DIO_u8_READ_PIN+0xcc>
    14d8:	ca 01       	movw	r24, r20
    14da:	81 70       	andi	r24, 0x01	; 1
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	11 c0       	rjmp	.+34     	; 0x1502 <DIO_u8_READ_PIN+0xfe>
			break;

		case PORTD:
			Value= GET_BIT(PIND_REGISTER,Pin);
    14e0:	e0 e3       	ldi	r30, 0x30	; 48
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	8c 81       	ldd	r24, Y+4	; 0x04
    14ec:	88 2f       	mov	r24, r24
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	a9 01       	movw	r20, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <DIO_u8_READ_PIN+0xf4>
    14f4:	55 95       	asr	r21
    14f6:	47 95       	ror	r20
    14f8:	8a 95       	dec	r24
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <DIO_u8_READ_PIN+0xf0>
    14fc:	ca 01       	movw	r24, r20
    14fe:	81 70       	andi	r24, 0x01	; 1
    1500:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		return Value;
    1502:	59 81       	ldd	r21, Y+1	; 0x01
    1504:	5d 83       	std	Y+5, r21	; 0x05
    1506:	03 c0       	rjmp	.+6      	; 0x150e <DIO_u8_READ_PIN+0x10a>

	}else{
		Local_u8_error_state=ERR;
    1508:	1a 82       	std	Y+2, r1	; 0x02
		return Local_u8_error_state;
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	8d 83       	std	Y+5, r24	; 0x05
    150e:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
    1510:	27 96       	adiw	r28, 0x07	; 7
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	f8 94       	cli
    1516:	de bf       	out	0x3e, r29	; 62
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	cd bf       	out	0x3d, r28	; 61
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	08 95       	ret

00001522 <INTERRUPT_GIE_ENABLE>:
#include "BIT_MATH.h"

// MCUCR & MCUCSR - controls the type of trigger - rising edge , falling edge etc...

void INTERRUPT_GIE_ENABLE()
{
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    152a:	af e5       	ldi	r26, 0x5F	; 95
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	ef e5       	ldi	r30, 0x5F	; 95
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	80 68       	ori	r24, 0x80	; 128
    1536:	8c 93       	st	X, r24
}
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <INTERRUPT_GIE_DISABLE>:

void  INTERRUPT_GIE_DISABLE()
{
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,SREG_I);
    1546:	af e5       	ldi	r26, 0x5F	; 95
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	ef e5       	ldi	r30, 0x5F	; 95
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	8f 77       	andi	r24, 0x7F	; 127
    1552:	8c 93       	st	X, r24
}
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <INTERRUPT_INIT>:

void INTERRUPT_INIT(u8 INTERRUPT_PIN_X , u8 MOOD_X)
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	2a 97       	sbiw	r28, 0x0a	; 10
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	89 83       	std	Y+1, r24	; 0x01
    1570:	6a 83       	std	Y+2, r22	; 0x02
	switch(INTERRUPT_PIN_X){
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	3a 87       	std	Y+10, r19	; 0x0a
    157a:	29 87       	std	Y+9, r18	; 0x09
    157c:	89 85       	ldd	r24, Y+9	; 0x09
    157e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	91 05       	cpc	r25, r1
    1584:	09 f4       	brne	.+2      	; 0x1588 <INTERRUPT_INIT+0x2e>
    1586:	52 c0       	rjmp	.+164    	; 0x162c <INTERRUPT_INIT+0xd2>
    1588:	29 85       	ldd	r18, Y+9	; 0x09
    158a:	3a 85       	ldd	r19, Y+10	; 0x0a
    158c:	22 30       	cpi	r18, 0x02	; 2
    158e:	31 05       	cpc	r19, r1
    1590:	09 f4       	brne	.+2      	; 0x1594 <INTERRUPT_INIT+0x3a>
    1592:	93 c0       	rjmp	.+294    	; 0x16ba <INTERRUPT_INIT+0x160>
    1594:	89 85       	ldd	r24, Y+9	; 0x09
    1596:	9a 85       	ldd	r25, Y+10	; 0x0a
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	09 f0       	breq	.+2      	; 0x159e <INTERRUPT_INIT+0x44>
    159c:	b3 c0       	rjmp	.+358    	; 0x1704 <INTERRUPT_INIT+0x1aa>

	case INTERRUPT_PIN_0:
		switch(MOOD_X){
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	38 87       	std	Y+8, r19	; 0x08
    15a6:	2f 83       	std	Y+7, r18	; 0x07
    15a8:	8f 81       	ldd	r24, Y+7	; 0x07
    15aa:	98 85       	ldd	r25, Y+8	; 0x08
    15ac:	81 30       	cpi	r24, 0x01	; 1
    15ae:	91 05       	cpc	r25, r1
    15b0:	c1 f0       	breq	.+48     	; 0x15e2 <INTERRUPT_INIT+0x88>
    15b2:	2f 81       	ldd	r18, Y+7	; 0x07
    15b4:	38 85       	ldd	r19, Y+8	; 0x08
    15b6:	22 30       	cpi	r18, 0x02	; 2
    15b8:	31 05       	cpc	r19, r1
    15ba:	11 f1       	breq	.+68     	; 0x1600 <INTERRUPT_INIT+0xa6>
    15bc:	8f 81       	ldd	r24, Y+7	; 0x07
    15be:	98 85       	ldd	r25, Y+8	; 0x08
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	61 f5       	brne	.+88     	; 0x161c <INTERRUPT_INIT+0xc2>
		case MOOD_FALL:
			// set sense control for Int0 to falling edge
			SET_BIT(MCUCR , ISC01);
    15c4:	a5 e5       	ldi	r26, 0x55	; 85
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e5 e5       	ldi	r30, 0x55	; 85
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	82 60       	ori	r24, 0x02	; 2
    15d0:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR , ISC00);
    15d2:	a5 e5       	ldi	r26, 0x55	; 85
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e5 e5       	ldi	r30, 0x55	; 85
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	8e 7f       	andi	r24, 0xFE	; 254
    15de:	8c 93       	st	X, r24
    15e0:	1d c0       	rjmp	.+58     	; 0x161c <INTERRUPT_INIT+0xc2>
			break;
		case MOOD_RISE:
			// set sense control for Int0 to Rising edge
			SET_BIT(MCUCR , ISC01);
    15e2:	a5 e5       	ldi	r26, 0x55	; 85
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e5 e5       	ldi	r30, 0x55	; 85
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	82 60       	ori	r24, 0x02	; 2
    15ee:	8c 93       	st	X, r24
			SET_BIT(MCUCR , ISC00);
    15f0:	a5 e5       	ldi	r26, 0x55	; 85
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e5 e5       	ldi	r30, 0x55	; 85
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	81 60       	ori	r24, 0x01	; 1
    15fc:	8c 93       	st	X, r24
    15fe:	0e c0       	rjmp	.+28     	; 0x161c <INTERRUPT_INIT+0xc2>
			break;
		case MOOD_LOGIC:
			// set sense control for Int0 to Logical Change
			CLEAR_BIT(MCUCR , ISC01);
    1600:	a5 e5       	ldi	r26, 0x55	; 85
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e5 e5       	ldi	r30, 0x55	; 85
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	8d 7f       	andi	r24, 0xFD	; 253
    160c:	8c 93       	st	X, r24
			SET_BIT(MCUCR , ISC00);
    160e:	a5 e5       	ldi	r26, 0x55	; 85
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e5 e5       	ldi	r30, 0x55	; 85
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	81 60       	ori	r24, 0x01	; 1
    161a:	8c 93       	st	X, r24
			break;
		}
		SET_BIT(GICR, GICR_INT0);
    161c:	ab e5       	ldi	r26, 0x5B	; 91
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	eb e5       	ldi	r30, 0x5B	; 91
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	80 64       	ori	r24, 0x40	; 64
    1628:	8c 93       	st	X, r24
    162a:	6c c0       	rjmp	.+216    	; 0x1704 <INTERRUPT_INIT+0x1aa>
		break;

		case INTERRUPT_PIN_1:
			switch(MOOD_X){
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	3e 83       	std	Y+6, r19	; 0x06
    1634:	2d 83       	std	Y+5, r18	; 0x05
    1636:	8d 81       	ldd	r24, Y+5	; 0x05
    1638:	9e 81       	ldd	r25, Y+6	; 0x06
    163a:	81 30       	cpi	r24, 0x01	; 1
    163c:	91 05       	cpc	r25, r1
    163e:	c1 f0       	breq	.+48     	; 0x1670 <INTERRUPT_INIT+0x116>
    1640:	2d 81       	ldd	r18, Y+5	; 0x05
    1642:	3e 81       	ldd	r19, Y+6	; 0x06
    1644:	22 30       	cpi	r18, 0x02	; 2
    1646:	31 05       	cpc	r19, r1
    1648:	11 f1       	breq	.+68     	; 0x168e <INTERRUPT_INIT+0x134>
    164a:	8d 81       	ldd	r24, Y+5	; 0x05
    164c:	9e 81       	ldd	r25, Y+6	; 0x06
    164e:	00 97       	sbiw	r24, 0x00	; 0
    1650:	61 f5       	brne	.+88     	; 0x16aa <INTERRUPT_INIT+0x150>
			case MOOD_FALL:
				// set sense control for Int0 to falling edge
				SET_BIT(MCUCR , ISC11);
    1652:	a5 e5       	ldi	r26, 0x55	; 85
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e5 e5       	ldi	r30, 0x55	; 85
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	88 60       	ori	r24, 0x08	; 8
    165e:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR , ISC10);
    1660:	a5 e5       	ldi	r26, 0x55	; 85
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e5 e5       	ldi	r30, 0x55	; 85
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	8b 7f       	andi	r24, 0xFB	; 251
    166c:	8c 93       	st	X, r24
    166e:	1d c0       	rjmp	.+58     	; 0x16aa <INTERRUPT_INIT+0x150>
				break;
			case MOOD_RISE:
				// set sense control for Int0 to Rising edge
				SET_BIT(MCUCR , ISC11);
    1670:	a5 e5       	ldi	r26, 0x55	; 85
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e5 e5       	ldi	r30, 0x55	; 85
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	88 60       	ori	r24, 0x08	; 8
    167c:	8c 93       	st	X, r24
				SET_BIT(MCUCR , ISC10);
    167e:	a5 e5       	ldi	r26, 0x55	; 85
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e5 e5       	ldi	r30, 0x55	; 85
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	84 60       	ori	r24, 0x04	; 4
    168a:	8c 93       	st	X, r24
    168c:	0e c0       	rjmp	.+28     	; 0x16aa <INTERRUPT_INIT+0x150>
				break;
			case MOOD_LOGIC:
				// set sense control for Int0 to Logical Change
				CLEAR_BIT(MCUCR , ISC11);
    168e:	a5 e5       	ldi	r26, 0x55	; 85
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e5 e5       	ldi	r30, 0x55	; 85
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	87 7f       	andi	r24, 0xF7	; 247
    169a:	8c 93       	st	X, r24
				SET_BIT(MCUCR , ISC10);
    169c:	a5 e5       	ldi	r26, 0x55	; 85
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e5 e5       	ldi	r30, 0x55	; 85
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	84 60       	ori	r24, 0x04	; 4
    16a8:	8c 93       	st	X, r24
				break;
			}
			SET_BIT(GICR, GICR_INT1);
    16aa:	ab e5       	ldi	r26, 0x5B	; 91
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	eb e5       	ldi	r30, 0x5B	; 91
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	80 68       	ori	r24, 0x80	; 128
    16b6:	8c 93       	st	X, r24
    16b8:	25 c0       	rjmp	.+74     	; 0x1704 <INTERRUPT_INIT+0x1aa>
			break;

			case INTERRUPT_PIN_2:
				switch(MOOD_X){
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	3c 83       	std	Y+4, r19	; 0x04
    16c2:	2b 83       	std	Y+3, r18	; 0x03
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	9c 81       	ldd	r25, Y+4	; 0x04
    16c8:	00 97       	sbiw	r24, 0x00	; 0
    16ca:	31 f0       	breq	.+12     	; 0x16d8 <INTERRUPT_INIT+0x17e>
    16cc:	2b 81       	ldd	r18, Y+3	; 0x03
    16ce:	3c 81       	ldd	r19, Y+4	; 0x04
    16d0:	21 30       	cpi	r18, 0x01	; 1
    16d2:	31 05       	cpc	r19, r1
    16d4:	49 f0       	breq	.+18     	; 0x16e8 <INTERRUPT_INIT+0x18e>
    16d6:	0f c0       	rjmp	.+30     	; 0x16f6 <INTERRUPT_INIT+0x19c>
				case MOOD_FALL:
					CLEAR_BIT(MCUCSR,ISC2);
    16d8:	a4 e5       	ldi	r26, 0x54	; 84
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e4 e5       	ldi	r30, 0x54	; 84
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	8f 7b       	andi	r24, 0xBF	; 191
    16e4:	8c 93       	st	X, r24
    16e6:	07 c0       	rjmp	.+14     	; 0x16f6 <INTERRUPT_INIT+0x19c>
					break;
				case MOOD_RISE:
					SET_BIT(MCUCSR,ISC2);
    16e8:	a4 e5       	ldi	r26, 0x54	; 84
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e4 e5       	ldi	r30, 0x54	; 84
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	80 64       	ori	r24, 0x40	; 64
    16f4:	8c 93       	st	X, r24
					break;
				}
				SET_BIT(GICR, GICR_INT2);
    16f6:	ab e5       	ldi	r26, 0x5B	; 91
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	eb e5       	ldi	r30, 0x5B	; 91
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	80 62       	ori	r24, 0x20	; 32
    1702:	8c 93       	st	X, r24
				break;
	}
}
    1704:	2a 96       	adiw	r28, 0x0a	; 10
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	de bf       	out	0x3e, r29	; 62
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	cd bf       	out	0x3d, r28	; 61
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	08 95       	ret

00001716 <TIMER_0_INIT>:



//timer 0
void TIMER_0_INIT(u8 mood , u8 prescaler)
{
    1716:	df 93       	push	r29
    1718:	cf 93       	push	r28
    171a:	00 d0       	rcall	.+0      	; 0x171c <TIMER_0_INIT+0x6>
    171c:	00 d0       	rcall	.+0      	; 0x171e <TIMER_0_INIT+0x8>
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	6a 83       	std	Y+2, r22	; 0x02
	TCCR0 = 0b00000000 | mood  | prescaler;
    1726:	e3 e5       	ldi	r30, 0x53	; 83
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	99 81       	ldd	r25, Y+1	; 0x01
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	89 2b       	or	r24, r25
    1730:	80 83       	st	Z, r24

	switch(mood){
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	3c 83       	std	Y+4, r19	; 0x04
    173a:	2b 83       	std	Y+3, r18	; 0x03
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	9c 81       	ldd	r25, Y+4	; 0x04
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	31 f0       	breq	.+12     	; 0x1750 <TIMER_0_INIT+0x3a>
    1744:	2b 81       	ldd	r18, Y+3	; 0x03
    1746:	3c 81       	ldd	r19, Y+4	; 0x04
    1748:	28 30       	cpi	r18, 0x08	; 8
    174a:	31 05       	cpc	r19, r1
    174c:	81 f0       	breq	.+32     	; 0x176e <TIMER_0_INIT+0x58>
    174e:	1e c0       	rjmp	.+60     	; 0x178c <TIMER_0_INIT+0x76>
	case NORMAL_0:
		SET_BIT(TIMSK,0);
    1750:	a9 e5       	ldi	r26, 0x59	; 89
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e9 e5       	ldi	r30, 0x59	; 89
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	81 60       	ori	r24, 0x01	; 1
    175c:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,1);
    175e:	a9 e5       	ldi	r26, 0x59	; 89
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e9 e5       	ldi	r30, 0x59	; 89
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	8d 7f       	andi	r24, 0xFD	; 253
    176a:	8c 93       	st	X, r24
    176c:	24 c0       	rjmp	.+72     	; 0x17b6 <TIMER_0_INIT+0xa0>
		break;
	case CTC_0:
		CLEAR_BIT(TIMSK,0);
    176e:	a9 e5       	ldi	r26, 0x59	; 89
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e9 e5       	ldi	r30, 0x59	; 89
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	8e 7f       	andi	r24, 0xFE	; 254
    177a:	8c 93       	st	X, r24
		SET_BIT(TIMSK,1);
    177c:	a9 e5       	ldi	r26, 0x59	; 89
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e9 e5       	ldi	r30, 0x59	; 89
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	82 60       	ori	r24, 0x02	; 2
    1788:	8c 93       	st	X, r24
    178a:	15 c0       	rjmp	.+42     	; 0x17b6 <TIMER_0_INIT+0xa0>

		break;
	default:
		CLEAR_BIT(TIMSK,0);
    178c:	a9 e5       	ldi	r26, 0x59	; 89
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e9 e5       	ldi	r30, 0x59	; 89
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	8e 7f       	andi	r24, 0xFE	; 254
    1798:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,1);// turn off interrupt
    179a:	a9 e5       	ldi	r26, 0x59	; 89
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e9 e5       	ldi	r30, 0x59	; 89
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	8d 7f       	andi	r24, 0xFD	; 253
    17a6:	8c 93       	st	X, r24
		TCCR0 |= 0b0100000; // set pwm mood to clear on OC0 compare
    17a8:	a3 e5       	ldi	r26, 0x53	; 83
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e3 e5       	ldi	r30, 0x53	; 83
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	80 62       	ori	r24, 0x20	; 32
    17b4:	8c 93       	st	X, r24
		break;
	}
}
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	cf 91       	pop	r28
    17c0:	df 91       	pop	r29
    17c2:	08 95       	ret

000017c4 <TIMER_0_SET_INIT>:
void TIMER_0_SET_INIT(u8 initial_time)
{
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	0f 92       	push	r0
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
    17ce:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = initial_time;
    17d0:	e2 e5       	ldi	r30, 0x52	; 82
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	80 83       	st	Z, r24
}
    17d8:	0f 90       	pop	r0
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	08 95       	ret

000017e0 <TIMER_0_SET_COMPARE>:
void TIMER_0_SET_COMPARE(u8 compare_time)
{
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	0f 92       	push	r0
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = compare_time;
    17ec:	ec e5       	ldi	r30, 0x5C	; 92
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	80 83       	st	Z, r24
}
    17f4:	0f 90       	pop	r0
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <TIMER_0_GET_TCNT>:
u8 TIMER_0_GET_TCNT(){
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    1804:	e2 e5       	ldi	r30, 0x52	; 82
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
}
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <TIMER_1_SET_INT_EDGE>:

//timer 1

void TIMER_1_SET_INT_EDGE(u8 edge){
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	00 d0       	rcall	.+0      	; 0x1816 <TIMER_1_SET_INT_EDGE+0x6>
    1816:	0f 92       	push	r0
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	89 83       	std	Y+1, r24	; 0x01
	switch(edge){
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	3b 83       	std	Y+3, r19	; 0x03
    1826:	2a 83       	std	Y+2, r18	; 0x02
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	9b 81       	ldd	r25, Y+3	; 0x03
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	31 f0       	breq	.+12     	; 0x183c <TIMER_1_SET_INT_EDGE+0x2c>
    1830:	2a 81       	ldd	r18, Y+2	; 0x02
    1832:	3b 81       	ldd	r19, Y+3	; 0x03
    1834:	21 30       	cpi	r18, 0x01	; 1
    1836:	31 05       	cpc	r19, r1
    1838:	49 f0       	breq	.+18     	; 0x184c <TIMER_1_SET_INT_EDGE+0x3c>
    183a:	0f c0       	rjmp	.+30     	; 0x185a <TIMER_1_SET_INT_EDGE+0x4a>
	case RISE:
		SET_BIT(TCCR1B,6);
    183c:	ae e4       	ldi	r26, 0x4E	; 78
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	ee e4       	ldi	r30, 0x4E	; 78
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	80 64       	ori	r24, 0x40	; 64
    1848:	8c 93       	st	X, r24
    184a:	07 c0       	rjmp	.+14     	; 0x185a <TIMER_1_SET_INT_EDGE+0x4a>
		break;
	case  FALL:
		CLEAR_BIT(TCCR1B,6);
    184c:	ae e4       	ldi	r26, 0x4E	; 78
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	ee e4       	ldi	r30, 0x4E	; 78
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	8f 7b       	andi	r24, 0xBF	; 191
    1858:	8c 93       	st	X, r24
		break;
	}
}
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	08 95       	ret

00001866 <TIMER_1_INIT>:
void TIMER_1_INIT(u8 mood, u8 prescaler , u8 channel)
{
    1866:	df 93       	push	r29
    1868:	cf 93       	push	r28
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	27 97       	sbiw	r28, 0x07	; 7
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	cd bf       	out	0x3d, r28	; 61
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	6a 83       	std	Y+2, r22	; 0x02
    187e:	4b 83       	std	Y+3, r20	; 0x03
		switch(mood){
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	3f 83       	std	Y+7, r19	; 0x07
    1888:	2e 83       	std	Y+6, r18	; 0x06
    188a:	8e 81       	ldd	r24, Y+6	; 0x06
    188c:	9f 81       	ldd	r25, Y+7	; 0x07
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	31 f0       	breq	.+12     	; 0x189e <TIMER_1_INIT+0x38>
    1892:	2e 81       	ldd	r18, Y+6	; 0x06
    1894:	3f 81       	ldd	r19, Y+7	; 0x07
    1896:	21 30       	cpi	r18, 0x01	; 1
    1898:	31 05       	cpc	r19, r1
    189a:	59 f1       	breq	.+86     	; 0x18f2 <TIMER_1_INIT+0x8c>
    189c:	63 c0       	rjmp	.+198    	; 0x1964 <TIMER_1_INIT+0xfe>
			case NORMAL_1:
				//common
				// wgm13-10 = 0000
				// cs12-10 = prescaler
				// TCCR1B is same for every case
				TCCR1B = 0b00000000 | prescaler;
    189e:	ee e4       	ldi	r30, 0x4E	; 78
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	80 83       	st	Z, r24
				TIMER_1_SET_INT_EDGE(FALL);
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	0e 94 08 0c 	call	0x1810	; 0x1810 <TIMER_1_SET_INT_EDGE>
				TCCR1A |= 0b00000000;
    18ac:	af e4       	ldi	r26, 0x4F	; 79
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	ef e4       	ldi	r30, 0x4F	; 79
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	8c 93       	st	X, r24

				SET_BIT(TIMSK, 2);
    18b8:	a9 e5       	ldi	r26, 0x59	; 89
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e9 e5       	ldi	r30, 0x59	; 89
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	84 60       	ori	r24, 0x04	; 4
    18c4:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK,3);
    18c6:	a9 e5       	ldi	r26, 0x59	; 89
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	e9 e5       	ldi	r30, 0x59	; 89
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	87 7f       	andi	r24, 0xF7	; 247
    18d2:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK,4);
    18d4:	a9 e5       	ldi	r26, 0x59	; 89
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e9 e5       	ldi	r30, 0x59	; 89
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	8f 7e       	andi	r24, 0xEF	; 239
    18e0:	8c 93       	st	X, r24
				SET_BIT(TIMSK, 5);
    18e2:	a9 e5       	ldi	r26, 0x59	; 89
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e9 e5       	ldi	r30, 0x59	; 89
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	80 62       	ori	r24, 0x20	; 32
    18ee:	8c 93       	st	X, r24
    18f0:	39 c0       	rjmp	.+114    	; 0x1964 <TIMER_1_INIT+0xfe>
				break;

			case F_PWM_1:
				// disable interrupt if enabled
				CLEAR_BIT(TIMSK, 2);
    18f2:	a9 e5       	ldi	r26, 0x59	; 89
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e9 e5       	ldi	r30, 0x59	; 89
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	8b 7f       	andi	r24, 0xFB	; 251
    18fe:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK,3);
    1900:	a9 e5       	ldi	r26, 0x59	; 89
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e9 e5       	ldi	r30, 0x59	; 89
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	87 7f       	andi	r24, 0xF7	; 247
    190c:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK,4);
    190e:	a9 e5       	ldi	r26, 0x59	; 89
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	e9 e5       	ldi	r30, 0x59	; 89
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	8f 7e       	andi	r24, 0xEF	; 239
    191a:	8c 93       	st	X, r24
				CLEAR_BIT(TIMSK, 5);
    191c:	a9 e5       	ldi	r26, 0x59	; 89
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e9 e5       	ldi	r30, 0x59	; 89
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	8f 7d       	andi	r24, 0xDF	; 223
    1928:	8c 93       	st	X, r24

				TCCR1B = 0b00011000 | prescaler;
    192a:	ee e4       	ldi	r30, 0x4E	; 78
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	88 61       	ori	r24, 0x18	; 24
    1932:	80 83       	st	Z, r24
				//common
				// wgm13-10 = 1110

				switch(channel){
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	3d 83       	std	Y+5, r19	; 0x05
    193c:	2c 83       	std	Y+4, r18	; 0x04
    193e:	8c 81       	ldd	r24, Y+4	; 0x04
    1940:	9d 81       	ldd	r25, Y+5	; 0x05
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	31 f0       	breq	.+12     	; 0x1952 <TIMER_1_INIT+0xec>
    1946:	2c 81       	ldd	r18, Y+4	; 0x04
    1948:	3d 81       	ldd	r19, Y+5	; 0x05
    194a:	21 30       	cpi	r18, 0x01	; 1
    194c:	31 05       	cpc	r19, r1
    194e:	31 f0       	breq	.+12     	; 0x195c <TIMER_1_INIT+0xf6>
    1950:	09 c0       	rjmp	.+18     	; 0x1964 <TIMER_1_INIT+0xfe>
					case CHANNEL_A:
						TCCR1A = 0b10000000 | 0b00000010;
    1952:	ef e4       	ldi	r30, 0x4F	; 79
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	82 e8       	ldi	r24, 0x82	; 130
    1958:	80 83       	st	Z, r24
    195a:	04 c0       	rjmp	.+8      	; 0x1964 <TIMER_1_INIT+0xfe>
						break;
					case CHANNEL_B:
						TCCR1A = 0b00100000 | 0b00000010;
    195c:	ef e4       	ldi	r30, 0x4F	; 79
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	82 e2       	ldi	r24, 0x22	; 34
    1962:	80 83       	st	Z, r24
				}
				break;
			}
}
    1964:	27 96       	adiw	r28, 0x07	; 7
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	cd bf       	out	0x3d, r28	; 61
    1970:	cf 91       	pop	r28
    1972:	df 91       	pop	r29
    1974:	08 95       	ret

00001976 <TIMER_1_SET_COMPARE>:

void TIMER_1_SET_COMPARE(u8 channel,u16 compare_value)
{
    1976:	df 93       	push	r29
    1978:	cf 93       	push	r28
    197a:	00 d0       	rcall	.+0      	; 0x197c <TIMER_1_SET_COMPARE+0x6>
    197c:	00 d0       	rcall	.+0      	; 0x197e <TIMER_1_SET_COMPARE+0x8>
    197e:	0f 92       	push	r0
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
    1984:	89 83       	std	Y+1, r24	; 0x01
    1986:	7b 83       	std	Y+3, r23	; 0x03
    1988:	6a 83       	std	Y+2, r22	; 0x02
	switch(channel){
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	3d 83       	std	Y+5, r19	; 0x05
    1992:	2c 83       	std	Y+4, r18	; 0x04
    1994:	8c 81       	ldd	r24, Y+4	; 0x04
    1996:	9d 81       	ldd	r25, Y+5	; 0x05
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	31 f0       	breq	.+12     	; 0x19a8 <TIMER_1_SET_COMPARE+0x32>
    199c:	2c 81       	ldd	r18, Y+4	; 0x04
    199e:	3d 81       	ldd	r19, Y+5	; 0x05
    19a0:	21 30       	cpi	r18, 0x01	; 1
    19a2:	31 05       	cpc	r19, r1
    19a4:	41 f0       	breq	.+16     	; 0x19b6 <TIMER_1_SET_COMPARE+0x40>
    19a6:	0d c0       	rjmp	.+26     	; 0x19c2 <TIMER_1_SET_COMPARE+0x4c>
	case CHANNEL_A:
		OCR1A = compare_value;
    19a8:	ea e4       	ldi	r30, 0x4A	; 74
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	8a 81       	ldd	r24, Y+2	; 0x02
    19ae:	9b 81       	ldd	r25, Y+3	; 0x03
    19b0:	91 83       	std	Z+1, r25	; 0x01
    19b2:	80 83       	st	Z, r24
    19b4:	06 c0       	rjmp	.+12     	; 0x19c2 <TIMER_1_SET_COMPARE+0x4c>
		break;
	case CHANNEL_B:
		OCR1B= compare_value;
    19b6:	e8 e4       	ldi	r30, 0x48	; 72
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	9b 81       	ldd	r25, Y+3	; 0x03
    19be:	91 83       	std	Z+1, r25	; 0x01
    19c0:	80 83       	st	Z, r24
	}
}
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <TIMER_1_SET_ICR>:

void TIMER_1_SET_ICR(u16 icr_value)
{
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	00 d0       	rcall	.+0      	; 0x19d8 <TIMER_1_SET_ICR+0x6>
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	9a 83       	std	Y+2, r25	; 0x02
    19de:	89 83       	std	Y+1, r24	; 0x01
	ICR1=icr_value;
    19e0:	e6 e4       	ldi	r30, 0x46	; 70
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	89 81       	ldd	r24, Y+1	; 0x01
    19e6:	9a 81       	ldd	r25, Y+2	; 0x02
    19e8:	91 83       	std	Z+1, r25	; 0x01
    19ea:	80 83       	st	Z, r24
}
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <TIMER_1_GET_ICR>:

u16 TIMER_1_GET_ICR(){
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    19fe:	e6 e4       	ldi	r30, 0x46	; 70
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	91 81       	ldd	r25, Z+1	; 0x01
}
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	08 95       	ret

00001a0c <UART_INIT>:

#include "BIT_MATH.h"
#include "UART_REGISTER.h"
#include "UART.h"

void UART_INIT(){
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
	// enable send and recieve
	SET_BIT(UCSRB, RXEN);
    1a14:	aa e2       	ldi	r26, 0x2A	; 42
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	ea e2       	ldi	r30, 0x2A	; 42
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	80 61       	ori	r24, 0x10	; 16
    1a20:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);
    1a22:	aa e2       	ldi	r26, 0x2A	; 42
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	ea e2       	ldi	r30, 0x2A	; 42
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	88 60       	ori	r24, 0x08	; 8
    1a2e:	8c 93       	st	X, r24

	//set data bit size to 8 bit

	SET_BIT(UCSRC, 7);
    1a30:	a0 e4       	ldi	r26, 0x40	; 64
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e0 e4       	ldi	r30, 0x40	; 64
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	80 68       	ori	r24, 0x80	; 128
    1a3c:	8c 93       	st	X, r24

	CLEAR_BIT(UCSRB, UCSZ2);
    1a3e:	aa e2       	ldi	r26, 0x2A	; 42
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	ea e2       	ldi	r30, 0x2A	; 42
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	8b 7f       	andi	r24, 0xFB	; 251
    1a4a:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ1);
    1a4c:	a0 e4       	ldi	r26, 0x40	; 64
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	e0 e4       	ldi	r30, 0x40	; 64
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	84 60       	ori	r24, 0x04	; 4
    1a58:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ0);
    1a5a:	a0 e4       	ldi	r26, 0x40	; 64
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e0 e4       	ldi	r30, 0x40	; 64
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	82 60       	ori	r24, 0x02	; 2
    1a66:	8c 93       	st	X, r24

	//set baud rate to 9600 at 8 mhz
	UBRRL = 51;
    1a68:	e9 e2       	ldi	r30, 0x29	; 41
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	83 e3       	ldi	r24, 0x33	; 51
    1a6e:	80 83       	st	Z, r24
}
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <UART_SEND_DATA>:



void UART_SEND_DATA(u8 data){
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	0f 92       	push	r0
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	89 83       	std	Y+1, r24	; 0x01
	//udre=1 --> buffer empty
	while(GET_BIT(UCSRA, UDRE)==0){}
    1a82:	eb e2       	ldi	r30, 0x2B	; 43
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	82 95       	swap	r24
    1a8a:	86 95       	lsr	r24
    1a8c:	87 70       	andi	r24, 0x07	; 7
    1a8e:	88 2f       	mov	r24, r24
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	81 70       	andi	r24, 0x01	; 1
    1a94:	90 70       	andi	r25, 0x00	; 0
    1a96:	00 97       	sbiw	r24, 0x00	; 0
    1a98:	a1 f3       	breq	.-24     	; 0x1a82 <UART_SEND_DATA+0xc>
	UDR=data;
    1a9a:	ec e2       	ldi	r30, 0x2C	; 44
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	80 83       	st	Z, r24
}
    1aa2:	0f 90       	pop	r0
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <UART_RECIEVE_DATA>:

u8 UART_RECIEVE_DATA(){
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA, RXC)==0){}
    1ab2:	eb e2       	ldi	r30, 0x2B	; 43
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	88 23       	and	r24, r24
    1aba:	dc f7       	brge	.-10     	; 0x1ab2 <UART_RECIEVE_DATA+0x8>
	return UDR;
    1abc:	ec e2       	ldi	r30, 0x2C	; 44
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
}
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <main>:
u8 req;
u8 id;
u8 command;


void main(){
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	00 d0       	rcall	.+0      	; 0x1ace <main+0x6>
    1ace:	00 d0       	rcall	.+0      	; 0x1ad0 <main+0x8>
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
	//SLAVE 1
	UART_INIT();
    1ad4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <UART_INIT>
	ADC_INIT();
    1ad8:	0e 94 b7 06 	call	0xd6e	; 0xd6e <ADC_INIT>
	DIO_u8_SET_PIN(PORTB , PIN3 , OUTPUT);
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	63 e0       	ldi	r22, 0x03	; 3
    1ae0:	41 e0       	ldi	r20, 0x01	; 1
    1ae2:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_u8_SET_PIN>
	DIO_u8_SET_PORT(PORTC, PORT_OUTPUT);
    1ae6:	82 e0       	ldi	r24, 0x02	; 2
    1ae8:	6f ef       	ldi	r22, 0xFF	; 255
    1aea:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_u8_SET_PORT>

	TIMER_0_SET_COMPARE(0);
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <TIMER_0_SET_COMPARE>
	TIMER_0_INIT(F_PWM_0 , PRE_8);
    1af4:	88 e4       	ldi	r24, 0x48	; 72
    1af6:	62 e0       	ldi	r22, 0x02	; 2
    1af8:	0e 94 8b 0b 	call	0x1716	; 0x1716 <TIMER_0_INIT>

	while(1){

		req = UART_RECIEVE_DATA();
    1afc:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <UART_RECIEVE_DATA>
    1b00:	80 93 68 01 	sts	0x0168, r24
		id = req & 0b11000000;
    1b04:	80 91 68 01 	lds	r24, 0x0168
    1b08:	80 7c       	andi	r24, 0xC0	; 192
    1b0a:	80 93 6a 01 	sts	0x016A, r24
		command = req & 0b00111111;
    1b0e:	80 91 68 01 	lds	r24, 0x0168
    1b12:	8f 73       	andi	r24, 0x3F	; 63
    1b14:	80 93 69 01 	sts	0x0169, r24

		u8 pres_reading = (u8)(((ADC_u16_READ(ADC0)/1023.0)*255.0));
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <ADC_u16_READ>
    1b1e:	cc 01       	movw	r24, r24
    1b20:	a0 e0       	ldi	r26, 0x00	; 0
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	bc 01       	movw	r22, r24
    1b26:	cd 01       	movw	r24, r26
    1b28:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	bc 01       	movw	r22, r24
    1b32:	cd 01       	movw	r24, r26
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 ec       	ldi	r19, 0xC0	; 192
    1b38:	4f e7       	ldi	r20, 0x7F	; 127
    1b3a:	54 e4       	ldi	r21, 0x44	; 68
    1b3c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	bc 01       	movw	r22, r24
    1b46:	cd 01       	movw	r24, r26
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	4f e7       	ldi	r20, 0x7F	; 127
    1b4e:	53 e4       	ldi	r21, 0x43	; 67
    1b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	bc 01       	movw	r22, r24
    1b5a:	cd 01       	movw	r24, r26
    1b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	8a 83       	std	Y+2, r24	; 0x02
		DIO_u8_WRITE_PORT(PORTC ,  pres_reading);
    1b66:	82 e0       	ldi	r24, 0x02	; 2
    1b68:	6a 81       	ldd	r22, Y+2	; 0x02
    1b6a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <DIO_u8_WRITE_PORT>


		if(id == SLAVE_ID){
    1b6e:	80 91 6a 01 	lds	r24, 0x016A
    1b72:	80 34       	cpi	r24, 0x40	; 64
    1b74:	d9 f4       	brne	.+54     	; 0x1bac <main+0xe4>


			switch(command)
    1b76:	80 91 69 01 	lds	r24, 0x0169
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	3c 83       	std	Y+4, r19	; 0x04
    1b80:	2b 83       	std	Y+3, r18	; 0x03
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	9c 81       	ldd	r25, Y+4	; 0x04
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	39 f0       	breq	.+14     	; 0x1b98 <main+0xd0>
    1b8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b8e:	21 30       	cpi	r18, 0x01	; 1
    1b90:	31 05       	cpc	r19, r1
    1b92:	09 f4       	brne	.+2      	; 0x1b96 <main+0xce>
    1b94:	b3 cf       	rjmp	.-154    	; 0x1afc <main+0x34>
    1b96:	07 c0       	rjmp	.+14     	; 0x1ba6 <main+0xde>
			{
			case MOTOR:
			{
				u8 data= UART_RECIEVE_DATA();
    1b98:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <UART_RECIEVE_DATA>
    1b9c:	89 83       	std	Y+1, r24	; 0x01

				TIMER_0_SET_COMPARE(data);
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <TIMER_0_SET_COMPARE>
    1ba4:	ab cf       	rjmp	.-170    	; 0x1afc <main+0x34>
			{

				break;
			}
			default:
				UART_RECIEVE_DATA();
    1ba6:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <UART_RECIEVE_DATA>
    1baa:	a8 cf       	rjmp	.-176    	; 0x1afc <main+0x34>
				break;
			}
		}else{
			UART_RECIEVE_DATA();
    1bac:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <UART_RECIEVE_DATA>
    1bb0:	a5 cf       	rjmp	.-182    	; 0x1afc <main+0x34>

00001bb2 <__prologue_saves__>:
    1bb2:	2f 92       	push	r2
    1bb4:	3f 92       	push	r3
    1bb6:	4f 92       	push	r4
    1bb8:	5f 92       	push	r5
    1bba:	6f 92       	push	r6
    1bbc:	7f 92       	push	r7
    1bbe:	8f 92       	push	r8
    1bc0:	9f 92       	push	r9
    1bc2:	af 92       	push	r10
    1bc4:	bf 92       	push	r11
    1bc6:	cf 92       	push	r12
    1bc8:	df 92       	push	r13
    1bca:	ef 92       	push	r14
    1bcc:	ff 92       	push	r15
    1bce:	0f 93       	push	r16
    1bd0:	1f 93       	push	r17
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
    1bda:	ca 1b       	sub	r28, r26
    1bdc:	db 0b       	sbc	r29, r27
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	f8 94       	cli
    1be2:	de bf       	out	0x3e, r29	; 62
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	cd bf       	out	0x3d, r28	; 61
    1be8:	09 94       	ijmp

00001bea <__epilogue_restores__>:
    1bea:	2a 88       	ldd	r2, Y+18	; 0x12
    1bec:	39 88       	ldd	r3, Y+17	; 0x11
    1bee:	48 88       	ldd	r4, Y+16	; 0x10
    1bf0:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bf2:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bf4:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bf6:	8c 84       	ldd	r8, Y+12	; 0x0c
    1bf8:	9b 84       	ldd	r9, Y+11	; 0x0b
    1bfa:	aa 84       	ldd	r10, Y+10	; 0x0a
    1bfc:	b9 84       	ldd	r11, Y+9	; 0x09
    1bfe:	c8 84       	ldd	r12, Y+8	; 0x08
    1c00:	df 80       	ldd	r13, Y+7	; 0x07
    1c02:	ee 80       	ldd	r14, Y+6	; 0x06
    1c04:	fd 80       	ldd	r15, Y+5	; 0x05
    1c06:	0c 81       	ldd	r16, Y+4	; 0x04
    1c08:	1b 81       	ldd	r17, Y+3	; 0x03
    1c0a:	aa 81       	ldd	r26, Y+2	; 0x02
    1c0c:	b9 81       	ldd	r27, Y+1	; 0x01
    1c0e:	ce 0f       	add	r28, r30
    1c10:	d1 1d       	adc	r29, r1
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	de bf       	out	0x3e, r29	; 62
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	cd bf       	out	0x3d, r28	; 61
    1c1c:	ed 01       	movw	r28, r26
    1c1e:	08 95       	ret

00001c20 <_exit>:
    1c20:	f8 94       	cli

00001c22 <__stop_program>:
    1c22:	ff cf       	rjmp	.-2      	; 0x1c22 <__stop_program>
